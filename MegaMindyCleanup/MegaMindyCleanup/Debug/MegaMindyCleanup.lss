
MegaMindyCleanup.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  00001710  000017a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011e  008002c4  008002c4  00001968  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cee  00000000  00000000  00001b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfc  00000000  00000000  00003842  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ec4  00000000  00000000  0000443e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  00005304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076c  00000000  00000000  00005780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e5b  00000000  00000000  00005eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00006d47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_18>
      4c:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e1       	ldi	r30, 0x10	; 16
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 3c       	cpi	r26, 0xC4	; 196
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	a4 ec       	ldi	r26, 0xC4	; 196
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3e       	cpi	r26, 0xE2	; 226
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <main>
      9e:	0c 94 86 0b 	jmp	0x170c	; 0x170c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
volatile char PORTB_Pins[4] = {PORTB0, PORTB1, PORTB2, PORTB3};
volatile char PINB_Pins[4] = {PINB0, PINB1, PINB2, PINB3};
volatile int pinStates[4] = {0,0,0,0};

ISR(TIMER1_COMPA_vect)
{
      a6:	1f 92       	push	r1
      a8:	0f 92       	push	r0
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	0f 92       	push	r0
      ae:	11 24       	eor	r1, r1
      b0:	2f 93       	push	r18
      b2:	3f 93       	push	r19
      b4:	4f 93       	push	r20
      b6:	5f 93       	push	r21
      b8:	6f 93       	push	r22
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25
      be:	ef 93       	push	r30
      c0:	ff 93       	push	r31
	for(int i = 0; i < 4; i++)
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	90 e0       	ldi	r25, 0x00	; 0
		{
		case 0:
			BIT_OFF_IN_REG(PORTB, PORTB_Pins[i]);
		break;
		case 1:
			BIT_ON_IN_REG(PORTB, PORTB_Pins[i]);
      c6:	41 e0       	ldi	r20, 0x01	; 1
      c8:	50 e0       	ldi	r21, 0x00	; 0

ISR(TIMER1_COMPA_vect)
{
	for(int i = 0; i < 4; i++)
	{
		switch (pinStates[i])
      ca:	fc 01       	movw	r30, r24
      cc:	ee 0f       	add	r30, r30
      ce:	ff 1f       	adc	r31, r31
      d0:	ea 53       	subi	r30, 0x3A	; 58
      d2:	fd 4f       	sbci	r31, 0xFD	; 253
      d4:	20 81       	ld	r18, Z
      d6:	31 81       	ldd	r19, Z+1	; 0x01
      d8:	21 30       	cpi	r18, 0x01	; 1
      da:	31 05       	cpc	r19, r1
      dc:	b1 f0       	breq	.+44     	; 0x10a <__vector_11+0x64>
      de:	22 30       	cpi	r18, 0x02	; 2
      e0:	31 05       	cpc	r19, r1
      e2:	11 f1       	breq	.+68     	; 0x128 <__vector_11+0x82>
      e4:	23 2b       	or	r18, r19
      e6:	71 f5       	brne	.+92     	; 0x144 <__vector_11+0x9e>
		{
		case 0:
			BIT_OFF_IN_REG(PORTB, PORTB_Pins[i]);
      e8:	fc 01       	movw	r30, r24
      ea:	ec 5f       	subi	r30, 0xFC	; 252
      ec:	fe 4f       	sbci	r31, 0xFE	; 254
      ee:	20 81       	ld	r18, Z
      f0:	65 b1       	in	r22, 0x05	; 5
      f2:	fa 01       	movw	r30, r20
      f4:	02 c0       	rjmp	.+4      	; 0xfa <__vector_11+0x54>
      f6:	ee 0f       	add	r30, r30
      f8:	ff 1f       	adc	r31, r31
      fa:	2a 95       	dec	r18
      fc:	e2 f7       	brpl	.-8      	; 0xf6 <__vector_11+0x50>
      fe:	9f 01       	movw	r18, r30
     100:	20 95       	com	r18
     102:	30 95       	com	r19
     104:	26 23       	and	r18, r22
     106:	25 b9       	out	0x05, r18	; 5
		break;
     108:	1d c0       	rjmp	.+58     	; 0x144 <__vector_11+0x9e>
		case 1:
			BIT_ON_IN_REG(PORTB, PORTB_Pins[i]);
     10a:	fc 01       	movw	r30, r24
     10c:	ec 5f       	subi	r30, 0xFC	; 252
     10e:	fe 4f       	sbci	r31, 0xFE	; 254
     110:	20 81       	ld	r18, Z
     112:	65 b1       	in	r22, 0x05	; 5
     114:	fa 01       	movw	r30, r20
     116:	02 c0       	rjmp	.+4      	; 0x11c <__vector_11+0x76>
     118:	ee 0f       	add	r30, r30
     11a:	ff 1f       	adc	r31, r31
     11c:	2a 95       	dec	r18
     11e:	e2 f7       	brpl	.-8      	; 0x118 <__vector_11+0x72>
     120:	9f 01       	movw	r18, r30
     122:	26 2b       	or	r18, r22
     124:	25 b9       	out	0x05, r18	; 5
		break;
     126:	0e c0       	rjmp	.+28     	; 0x144 <__vector_11+0x9e>
		case 2:
			BIT_FLIP_IN_REG(PORTB, PORTB_Pins[i]);
     128:	fc 01       	movw	r30, r24
     12a:	ec 5f       	subi	r30, 0xFC	; 252
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	20 81       	ld	r18, Z
     130:	65 b1       	in	r22, 0x05	; 5
     132:	fa 01       	movw	r30, r20
     134:	02 c0       	rjmp	.+4      	; 0x13a <__vector_11+0x94>
     136:	ee 0f       	add	r30, r30
     138:	ff 1f       	adc	r31, r31
     13a:	2a 95       	dec	r18
     13c:	e2 f7       	brpl	.-8      	; 0x136 <__vector_11+0x90>
     13e:	9f 01       	movw	r18, r30
     140:	26 27       	eor	r18, r22
     142:	25 b9       	out	0x05, r18	; 5
volatile char PINB_Pins[4] = {PINB0, PINB1, PINB2, PINB3};
volatile int pinStates[4] = {0,0,0,0};

ISR(TIMER1_COMPA_vect)
{
	for(int i = 0; i < 4; i++)
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	84 30       	cpi	r24, 0x04	; 4
     148:	91 05       	cpc	r25, r1
     14a:	09 f0       	breq	.+2      	; 0x14e <__vector_11+0xa8>
     14c:	be cf       	rjmp	.-132    	; 0xca <__vector_11+0x24>
			BIT_FLIP_IN_REG(PORTB, PORTB_Pins[i]);
		break;
		}
	}
	//LED_TOGGLE;
}
     14e:	ff 91       	pop	r31
     150:	ef 91       	pop	r30
     152:	9f 91       	pop	r25
     154:	8f 91       	pop	r24
     156:	6f 91       	pop	r22
     158:	5f 91       	pop	r21
     15a:	4f 91       	pop	r20
     15c:	3f 91       	pop	r19
     15e:	2f 91       	pop	r18
     160:	0f 90       	pop	r0
     162:	0f be       	out	0x3f, r0	; 63
     164:	0f 90       	pop	r0
     166:	1f 90       	pop	r1
     168:	18 95       	reti

0000016a <__vector_9>:

ISR(TIMER2_OVF_vect)
{
     16a:	1f 92       	push	r1
     16c:	0f 92       	push	r0
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	0f 92       	push	r0
     172:	11 24       	eor	r1, r1
     174:	2f 93       	push	r18
     176:	3f 93       	push	r19
     178:	8f 93       	push	r24
     17a:	9f 93       	push	r25
	static int count = 0;
	if(count < 30 && LED_setting == 1)
     17c:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     180:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__data_end+0x1>
     184:	8e 31       	cpi	r24, 0x1E	; 30
     186:	91 05       	cpc	r25, r1
     188:	6c f4       	brge	.+26     	; 0x1a4 <__vector_9+0x3a>
     18a:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <LED_setting>
     18e:	30 91 d7 03 	lds	r19, 0x03D7	; 0x8003d7 <LED_setting+0x1>
     192:	21 30       	cpi	r18, 0x01	; 1
     194:	31 05       	cpc	r19, r1
     196:	31 f4       	brne	.+12     	; 0x1a4 <__vector_9+0x3a>
	{
		count ++;
     198:	01 96       	adiw	r24, 0x01	; 1
     19a:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <__data_end+0x1>
     19e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     1a2:	0e c0       	rjmp	.+28     	; 0x1c0 <__vector_9+0x56>
	}
	else if (LED_setting == 1)
     1a4:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <LED_setting>
     1a8:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <LED_setting+0x1>
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	41 f4       	brne	.+16     	; 0x1c0 <__vector_9+0x56>
	{
		LED_TOGGLE;
     1b0:	1d 9a       	sbi	0x03, 5	; 3
		count = 0;
     1b2:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <__data_end+0x1>
     1b6:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
	}
	
	if(count < 150 && LED_setting == 2)
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	07 c0       	rjmp	.+14     	; 0x1ce <__vector_9+0x64>
     1c0:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <__data_end>
     1c4:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <__data_end+0x1>
     1c8:	86 39       	cpi	r24, 0x96	; 150
     1ca:	91 05       	cpc	r25, r1
     1cc:	74 f4       	brge	.+28     	; 0x1ea <__vector_9+0x80>
     1ce:	20 91 d6 03 	lds	r18, 0x03D6	; 0x8003d6 <LED_setting>
     1d2:	30 91 d7 03 	lds	r19, 0x03D7	; 0x8003d7 <LED_setting+0x1>
     1d6:	22 30       	cpi	r18, 0x02	; 2
     1d8:	31 05       	cpc	r19, r1
     1da:	39 f4       	brne	.+14     	; 0x1ea <__vector_9+0x80>
	{
		count +=100;
     1dc:	8c 59       	subi	r24, 0x9C	; 156
     1de:	9f 4f       	sbci	r25, 0xFF	; 255
     1e0:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <__data_end+0x1>
     1e4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
     1e8:	0b c0       	rjmp	.+22     	; 0x200 <__vector_9+0x96>
	}
	else if (LED_setting == 2)
     1ea:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <LED_setting>
     1ee:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <LED_setting+0x1>
     1f2:	02 97       	sbiw	r24, 0x02	; 2
     1f4:	29 f4       	brne	.+10     	; 0x200 <__vector_9+0x96>
	{
		LED_TOGGLE;
     1f6:	1d 9a       	sbi	0x03, 5	; 3
		count = 0;
     1f8:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <__data_end+0x1>
     1fc:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
	}
}
     200:	9f 91       	pop	r25
     202:	8f 91       	pop	r24
     204:	3f 91       	pop	r19
     206:	2f 91       	pop	r18
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <initTimers>:

void initTimers()
{
	LED_counter = 0;
     212:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <LED_counter+0x1>
     216:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <LED_counter>
	LED_setting = 0;
     21a:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <LED_setting+0x1>
     21e:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <LED_setting>
	BITS_5_ON_IN_REG(DDRB, DDB0, DDB1, DDB2, DDB3, DDB5);
     222:	84 b1       	in	r24, 0x04	; 4
     224:	8f 62       	ori	r24, 0x2F	; 47
     226:	84 b9       	out	0x04, r24	; 4
	/*
	*	TCCR1B (Timer \ Counter1 Control Register 1 B) 16.11.2
	*	TCCR1B Bit 4, 3 and TCCR1A Bit 1, 0 to select the Mode of Operation 
	*	we make bit 3 of TCCR1B high for the code (0b0100) CTC mode
	*/
	BIT_ON_IN_REG(TCCR1B, WGM12);	
     228:	e1 e8       	ldi	r30, 0x81	; 129
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	88 60       	ori	r24, 0x08	; 8
     230:	80 83       	st	Z, r24
	/*
	*	TIMSK1 (Timer / Counter1 Interrupt Mask Register) 16.11.8
	*	Bit 1 (OCIE1A [Timer / Counter1 Output Compare A Match Interrupt Enable])
	*	Turn this bit on to trigger the interrupt if output compare A is high 
	*/
	BIT_ON_IN_REG(TIMSK1, OCIE1A);
     232:	ef e6       	ldi	r30, 0x6F	; 111
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	80 81       	ld	r24, Z
     238:	82 60       	ori	r24, 0x02	; 2
     23a:	80 83       	st	Z, r24
	
	BIT_ON_IN_REG(TIMSK2, TOIE2);
     23c:	e0 e7       	ldi	r30, 0x70	; 112
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	81 60       	ori	r24, 0x01	; 1
     244:	80 83       	st	Z, r24
     246:	08 95       	ret

00000248 <timer1_Frequency>:
	/*
	*	TCCR1B (Timer \ Counter1 Control Register 1 B) 16.11.2
	*	Bit 2, 1, 0 for Clock Select
	*	We make bit 2 (CS12) high for the code (0b100) prescaler 256
	*/
	BIT_ON_IN_REG(TCCR1B, CS12);	
     248:	e1 e8       	ldi	r30, 0x81	; 129
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	90 81       	ld	r25, Z
     24e:	94 60       	ori	r25, 0x04	; 4
     250:	90 83       	st	Z, r25
	*	[F_CPU = Fclk_I/O], [N = Prescaler]
	*	Freq = F_CPU / 2 * N * (1 + OCR1A)
	*	Change formula to calculate OCR1A with a given Freq
	*	OCR1A = F_CPU / (Freq * 2 * N) - 1
	*/
	OCR1A = (F_CPU/(freq*2*256)-1);
     252:	28 2f       	mov	r18, r24
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	32 2f       	mov	r19, r18
     258:	22 27       	eor	r18, r18
     25a:	33 0f       	add	r19, r19
     25c:	03 2e       	mov	r0, r19
     25e:	00 0c       	add	r0, r0
     260:	44 0b       	sbc	r20, r20
     262:	55 0b       	sbc	r21, r21
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	74 e2       	ldi	r23, 0x24	; 36
     268:	84 ef       	ldi	r24, 0xF4	; 244
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 c9 07 	call	0xf92	; 0xf92 <__udivmodsi4>
     270:	21 50       	subi	r18, 0x01	; 1
     272:	31 09       	sbc	r19, r1
     274:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     278:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     27c:	08 95       	ret

0000027e <turnTimer2Off>:
}

void turnTimer2Off()
{
	BITS_3_OFF_IN_REG(TCCR2B, CS22, CS21, CS20);
     27e:	e1 eb       	ldi	r30, 0xB1	; 177
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8b 7f       	andi	r24, 0xFB	; 251
     286:	80 83       	st	Z, r24
	LED_OFF;
     288:	2d 98       	cbi	0x05, 5	; 5
	LED_setting = 0;
     28a:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <LED_setting+0x1>
     28e:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <LED_setting>
     292:	08 95       	ret

00000294 <timer2_Frequency>:
}

void timer2_Frequency(int setting)
{
     294:	9c 01       	movw	r18, r24
	/*
	*	TCCR1B (Timer \ Counter1 Control Register 1 B) 16.11.2
	*	Bit 2, 1, 0 for Clock Select
	*	We make bit 2 (CS12) high for the code (0b100) prescaler 256
	*/
	BITS_3_ON_IN_REG(TCCR2B, CS22, CS21, CS20);	
     296:	e1 eb       	ldi	r30, 0xB1	; 177
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	90 81       	ld	r25, Z
     29c:	97 60       	ori	r25, 0x07	; 7
     29e:	90 83       	st	Z, r25
	LED_setting = setting;
     2a0:	30 93 d7 03 	sts	0x03D7, r19	; 0x8003d7 <LED_setting+0x1>
     2a4:	20 93 d6 03 	sts	0x03D6, r18	; 0x8003d6 <LED_setting>
     2a8:	08 95       	ret

000002aa <turnTimer1Off>:
	//OCR2A = (F_CPU/(freq*2*256)-1);
}

void turnTimer1Off()
{
	BIT_OFF_IN_REG(TCCR1B, CS12);
     2aa:	e1 e8       	ldi	r30, 0x81	; 129
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	8b 7f       	andi	r24, 0xFB	; 251
     2b2:	80 83       	st	Z, r24
	OCR1A = 0;
     2b4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     2b8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     2bc:	08 95       	ret

000002be <resetLeds>:
}

void resetLeds()
{
	for (int i = 0; i < 4; i++)
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	30 e0       	ldi	r19, 0x00	; 0
	{
		PIN_X_OFF(PORTB, PORTB_Pins[i]);
     2c2:	61 e0       	ldi	r22, 0x01	; 1
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	f9 01       	movw	r30, r18
     2c8:	ec 5f       	subi	r30, 0xFC	; 252
     2ca:	fe 4f       	sbci	r31, 0xFE	; 254
     2cc:	80 81       	ld	r24, Z
     2ce:	45 b1       	in	r20, 0x05	; 5
     2d0:	fb 01       	movw	r30, r22
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <resetLeds+0x1a>
     2d4:	ee 0f       	add	r30, r30
     2d6:	ff 1f       	adc	r31, r31
     2d8:	8a 95       	dec	r24
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <resetLeds+0x16>
     2dc:	cf 01       	movw	r24, r30
     2de:	80 95       	com	r24
     2e0:	90 95       	com	r25
     2e2:	84 23       	and	r24, r20
     2e4:	85 b9       	out	0x05, r24	; 5
	OCR1A = 0;
}

void resetLeds()
{
	for (int i = 0; i < 4; i++)
     2e6:	2f 5f       	subi	r18, 0xFF	; 255
     2e8:	3f 4f       	sbci	r19, 0xFF	; 255
     2ea:	24 30       	cpi	r18, 0x04	; 4
     2ec:	31 05       	cpc	r19, r1
     2ee:	59 f7       	brne	.-42     	; 0x2c6 <resetLeds+0x8>
	{
		PIN_X_OFF(PORTB, PORTB_Pins[i]);
	}
	LED_counter = 0;
     2f0:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <LED_counter+0x1>
     2f4:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <LED_counter>
     2f8:	08 95       	ret

000002fa <main>:
#include <util/delay.h>
#include "infoLeds.h"

int main(void)
{
	initMasterMind();
     2fa:	0e 94 2a 02 	call	0x454	; 0x454 <initMasterMind>
	InitUART(MYUBRR);
     2fe:	87 e6       	ldi	r24, 0x67	; 103
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 3a 07 	call	0xe74	; 0xe74 <InitUART>
	initTimers();
     306:	0e 94 09 01 	call	0x212	; 0x212 <initTimers>
	sei();
     30a:	78 94       	sei
	
	turns = 12;
     30c:	8c e0       	ldi	r24, 0x0C	; 12
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <turns+0x1>
     314:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <turns>
	resetPressed = 0;
     318:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <resetPressed+0x1>
     31c:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <resetPressed>
	reset = 0;
     320:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <reset+0x1>
     324:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <reset>
	
	TransmitString("Press reset to start the game\r\n");
     328:	88 e0       	ldi	r24, 0x08	; 8
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
		{
			//print some basic information
			_delay_ms(100);
			resetUart1();
			TransmitString("@------------------@\r\n");
			sprintf(formatString, "%s%d\r\n", "turns left : ", turns);
     330:	0f 2e       	mov	r0, r31
     332:	ff e3       	ldi	r31, 0x3F	; 63
     334:	ef 2e       	mov	r14, r31
     336:	f1 e0       	ldi	r31, 0x01	; 1
     338:	ff 2e       	mov	r15, r31
     33a:	f0 2d       	mov	r31, r0
     33c:	0d e4       	ldi	r16, 0x4D	; 77
     33e:	11 e0       	ldi	r17, 0x01	; 1
     340:	ca e2       	ldi	r28, 0x2A	; 42
     342:	d3 e0       	ldi	r29, 0x03	; 3
     344:	cc 2e       	mov	r12, r28
     346:	dd 2e       	mov	r13, r29
	
	TransmitString("Press reset to start the game\r\n");
    while (1) 
    {
		//don't start the game until reset is pressed
		if(resetPressed)
     348:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <resetPressed>
     34c:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <resetPressed+0x1>
     350:	89 2b       	or	r24, r25
     352:	d1 f3       	breq	.-12     	; 0x348 <main+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     354:	2f ef       	ldi	r18, 0xFF	; 255
     356:	81 ee       	ldi	r24, 0xE1	; 225
     358:	94 e0       	ldi	r25, 0x04	; 4
     35a:	21 50       	subi	r18, 0x01	; 1
     35c:	80 40       	sbci	r24, 0x00	; 0
     35e:	90 40       	sbci	r25, 0x00	; 0
     360:	e1 f7       	brne	.-8      	; 0x35a <main+0x60>
     362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x6a>
     364:	00 00       	nop
		{
			//print some basic information
			_delay_ms(100);
			resetUart1();
     366:	0e 94 ac 07 	call	0xf58	; 0xf58 <resetUart1>
			TransmitString("@------------------@\r\n");
     36a:	88 e2       	ldi	r24, 0x28	; 40
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
			sprintf(formatString, "%s%d\r\n", "turns left : ", turns);
     372:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <turns>
     376:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <turns+0x1>
     37a:	9f 93       	push	r25
     37c:	8f 93       	push	r24
     37e:	ff 92       	push	r15
     380:	ef 92       	push	r14
     382:	1f 93       	push	r17
     384:	0f 93       	push	r16
     386:	df 93       	push	r29
     388:	cf 93       	push	r28
     38a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <sprintf>
			TransmitString(formatString);
     38e:	8c 2d       	mov	r24, r12
     390:	9d 2d       	mov	r25, r13
     392:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     396:	9f ef       	ldi	r25, 0xFF	; 255
     398:	21 ee       	ldi	r18, 0xE1	; 225
     39a:	84 e0       	ldi	r24, 0x04	; 4
     39c:	91 50       	subi	r25, 0x01	; 1
     39e:	20 40       	sbci	r18, 0x00	; 0
     3a0:	80 40       	sbci	r24, 0x00	; 0
     3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0xa2>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0xac>
     3a6:	00 00       	nop
			_delay_ms(100);
			TransmitString("input code: ");
     3a8:	84 e5       	ldi	r24, 0x54	; 84
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
			//make sure reset is not set
			//if it is set you can't get input
			reset = 0;
     3b0:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <reset+0x1>
     3b4:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <reset>
     3b8:	8d b7       	in	r24, 0x3d	; 61
     3ba:	9e b7       	in	r25, 0x3e	; 62
     3bc:	08 96       	adiw	r24, 0x08	; 8
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	9e bf       	out	0x3e, r25	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	8d bf       	out	0x3d, r24	; 61
			
			//recieve a string
			do
			{
				ReceiveString(codeInput);
     3c8:	88 ed       	ldi	r24, 0xD8	; 216
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	0e 94 77 07 	call	0xeee	; 0xeee <ReceiveString>
				if (reset) //break if reset is pressed
     3d0:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <reset>
     3d4:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <reset+0x1>
     3d8:	89 2b       	or	r24, r25
     3da:	31 f4       	brne	.+12     	; 0x3e8 <main+0xee>
				{
					break;
				}
			} while (!getUserCode(codeInput)); //check the user input
     3dc:	88 ed       	ldi	r24, 0xD8	; 216
     3de:	93 e0       	ldi	r25, 0x03	; 3
     3e0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <getUserCode>
     3e4:	89 2b       	or	r24, r25
     3e6:	81 f3       	breq	.-32     	; 0x3c8 <main+0xce>
			
			//if reset was not pressed while waiting for input
			if(!reset)
     3e8:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <reset>
     3ec:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <reset+0x1>
     3f0:	89 2b       	or	r24, r25
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <main+0xfc>
     3f4:	a9 cf       	rjmp	.-174    	; 0x348 <main+0x4e>
			{
				//print all the info of the turn and store the info
				printInfo();
     3f6:	0e 94 dd 06 	call	0xdba	; 0xdba <printInfo>
     3fa:	a6 cf       	rjmp	.-180    	; 0x348 <main+0x4e>

000003fc <__vector_14>:

/*Timer 0 cmp A interrupt
 *use for the random generator
*/
ISR(TIMER0_COMPA_vect)
{
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
	if(cnt < 200)
     40a:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <cnt>
     40e:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <cnt+0x1>
     412:	88 3c       	cpi	r24, 0xC8	; 200
     414:	91 05       	cpc	r25, r1
     416:	50 f4       	brcc	.+20     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		cnt++;
     418:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <cnt>
     41c:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <cnt+0x1>
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <cnt+0x1>
     426:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <cnt>
     42a:	0d c0       	rjmp	.+26     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
	}
	else
	{
		cnt = 0;
     42c:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <cnt+0x1>
     430:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <cnt>
		counter++;
     434:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <counter>
     438:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <counter+0x1>
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <counter+0x1>
     442:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <counter>
	}
}
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <initMasterMind>:
	 * freq = F_CPU / (2 * 64 * 250 )
	 * 1/freq = 1/500 s
	 * 200 loops for 1 puls so * 200
	 * 1/((1 / 500) * 200) = 2,5 Hz
	*/
	BIT_ON_IN_REG(TIMSK0, OCIE0A);
     454:	ee e6       	ldi	r30, 0x6E	; 110
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	82 60       	ori	r24, 0x02	; 2
     45c:	80 83       	st	Z, r24
	BIT_ON_IN_REG(TCCR0A, WGM01);
     45e:	84 b5       	in	r24, 0x24	; 36
     460:	82 60       	ori	r24, 0x02	; 2
     462:	84 bd       	out	0x24, r24	; 36
	OCR0A = 249;
     464:	89 ef       	ldi	r24, 0xF9	; 249
     466:	87 bd       	out	0x27, r24	; 39
	BITS_2_ON_IN_REG(TCCR0B, CS10, CS11);
     468:	85 b5       	in	r24, 0x25	; 37
     46a:	83 60       	ori	r24, 0x03	; 3
     46c:	85 bd       	out	0x25, r24	; 37
	
	//set interrupt on button
	BIT_ON_IN_REG(PCMSK0, PCINT7);
     46e:	eb e6       	ldi	r30, 0x6B	; 107
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	80 68       	ori	r24, 0x80	; 128
     476:	80 83       	st	Z, r24
	BIT_ON_IN_REG(PCICR, PCIE0);
     478:	e8 e6       	ldi	r30, 0x68	; 104
     47a:	f0 e0       	ldi	r31, 0x00	; 0
     47c:	80 81       	ld	r24, Z
     47e:	81 60       	ori	r24, 0x01	; 1
     480:	80 83       	st	Z, r24
	//make led output
	BIT_ON_IN_REG(DDRB, DDB0);
     482:	20 9a       	sbi	0x04, 0	; 4
	//make button input
	BIT_OFF_IN_REG(DDRB, DDB7);
     484:	27 98       	cbi	0x04, 7	; 4
     486:	08 95       	ret

00000488 <generateRandomCode>:
}

//fills a mm_code_t struct with 4 random values
void generateRandomCode(mm_code_t * _code)
{
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
	srand(counter);
     492:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <counter>
     496:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <counter+0x1>
     49a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <srand>
	_code->number1 = 1 + rand()%6;
     49e:	0e 94 4b 08 	call	0x1096	; 0x1096 <rand>
     4a2:	06 e0       	ldi	r16, 0x06	; 6
     4a4:	10 e0       	ldi	r17, 0x00	; 0
     4a6:	b8 01       	movw	r22, r16
     4a8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__divmodhi4>
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	99 83       	std	Y+1, r25	; 0x01
     4b0:	88 83       	st	Y, r24
	_code->number2 = 1 + rand()%6;
     4b2:	0e 94 4b 08 	call	0x1096	; 0x1096 <rand>
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__divmodhi4>
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	9b 83       	std	Y+3, r25	; 0x03
     4c0:	8a 83       	std	Y+2, r24	; 0x02
	_code->number3 = 1 + rand()%6;
     4c2:	0e 94 4b 08 	call	0x1096	; 0x1096 <rand>
     4c6:	b8 01       	movw	r22, r16
     4c8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__divmodhi4>
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	9d 83       	std	Y+5, r25	; 0x05
     4d0:	8c 83       	std	Y+4, r24	; 0x04
	_code->number4 = 1 + rand()%6;
     4d2:	0e 94 4b 08 	call	0x1096	; 0x1096 <rand>
     4d6:	b8 01       	movw	r22, r16
     4d8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__divmodhi4>
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	9f 83       	std	Y+7, r25	; 0x07
     4e0:	8e 83       	std	Y+6, r24	; 0x06
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	08 95       	ret

000004ec <checkCode>:

//checks if the user input is the same as the code
void checkCode()
{
     4ec:	af 92       	push	r10
     4ee:	bf 92       	push	r11
     4f0:	cf 92       	push	r12
     4f2:	df 92       	push	r13
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
	//make sure the mm_result_t struct currentResult is empty
	currentResult.correctLocations = 0;
     500:	ee e3       	ldi	r30, 0x3E	; 62
     502:	f3 e0       	ldi	r31, 0x03	; 3
     504:	11 82       	std	Z+1, r1	; 0x01
     506:	10 82       	st	Z, r1
	currentResult.correctNumbes = 0;
     508:	13 82       	std	Z+3, r1	; 0x03
     50a:	12 82       	std	Z+2, r1	; 0x02
	//add 1 to correctLocations for every correct number on the correct place
	if(secretCode1.number1 == userInputCode.number1)
     50c:	60 91 18 03 	lds	r22, 0x0318	; 0x800318 <secretCode1>
     510:	70 91 19 03 	lds	r23, 0x0319	; 0x800319 <secretCode1+0x1>
     514:	00 91 22 03 	lds	r16, 0x0322	; 0x800322 <userInputCode>
     518:	10 91 23 03 	lds	r17, 0x0323	; 0x800323 <userInputCode+0x1>
     51c:	60 17       	cp	r22, r16
     51e:	71 07       	cpc	r23, r17
     520:	31 f4       	brne	.+12     	; 0x52e <checkCode+0x42>
	{
		currentResult.correctLocations += 1;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <currentResult+0x1>
     52a:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <currentResult>
	}
	if(secretCode1.number2 == userInputCode.number2)
     52e:	40 91 1a 03 	lds	r20, 0x031A	; 0x80031a <secretCode1+0x2>
     532:	50 91 1b 03 	lds	r21, 0x031B	; 0x80031b <secretCode1+0x3>
     536:	c0 91 24 03 	lds	r28, 0x0324	; 0x800324 <userInputCode+0x2>
     53a:	d0 91 25 03 	lds	r29, 0x0325	; 0x800325 <userInputCode+0x3>
     53e:	4c 17       	cp	r20, r28
     540:	5d 07       	cpc	r21, r29
     542:	39 f4       	brne	.+14     	; 0x552 <checkCode+0x66>
	{
		currentResult.correctLocations += 1;
     544:	ee e3       	ldi	r30, 0x3E	; 62
     546:	f3 e0       	ldi	r31, 0x03	; 3
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24
	}
	if(secretCode1.number3 == userInputCode.number3)
     552:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <secretCode1+0x4>
     556:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <secretCode1+0x5>
     55a:	a0 91 26 03 	lds	r26, 0x0326	; 0x800326 <userInputCode+0x4>
     55e:	b0 91 27 03 	lds	r27, 0x0327	; 0x800327 <userInputCode+0x5>
     562:	2a 17       	cp	r18, r26
     564:	3b 07       	cpc	r19, r27
     566:	39 f4       	brne	.+14     	; 0x576 <checkCode+0x8a>
	{
		currentResult.correctLocations += 1;
     568:	ee e3       	ldi	r30, 0x3E	; 62
     56a:	f3 e0       	ldi	r31, 0x03	; 3
     56c:	80 81       	ld	r24, Z
     56e:	91 81       	ldd	r25, Z+1	; 0x01
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	91 83       	std	Z+1, r25	; 0x01
     574:	80 83       	st	Z, r24
	}
	if(secretCode1.number4 == userInputCode.number4)
     576:	a0 90 1e 03 	lds	r10, 0x031E	; 0x80031e <secretCode1+0x6>
     57a:	b0 90 1f 03 	lds	r11, 0x031F	; 0x80031f <secretCode1+0x7>
     57e:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <userInputCode+0x6>
     582:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <userInputCode+0x7>
     586:	a8 16       	cp	r10, r24
     588:	b9 06       	cpc	r11, r25
     58a:	79 f4       	brne	.+30     	; 0x5aa <checkCode+0xbe>
	{
		currentResult.correctLocations += 1;
     58c:	0f 2e       	mov	r0, r31
     58e:	fe e3       	ldi	r31, 0x3E	; 62
     590:	cf 2e       	mov	r12, r31
     592:	f3 e0       	ldi	r31, 0x03	; 3
     594:	df 2e       	mov	r13, r31
     596:	f0 2d       	mov	r31, r0
     598:	f6 01       	movw	r30, r12
     59a:	e0 80       	ld	r14, Z
     59c:	f1 80       	ldd	r15, Z+1	; 0x01
     59e:	ff ef       	ldi	r31, 0xFF	; 255
     5a0:	ef 1a       	sub	r14, r31
     5a2:	ff 0a       	sbc	r15, r31
     5a4:	f6 01       	movw	r30, r12
     5a6:	f1 82       	std	Z+1, r15	; 0x01
     5a8:	e0 82       	st	Z, r14
	}
	
	
	//add 1 to correctNumbers for every correct number on the wrong place
	// check 1 to 2, 3, 4
	if(userInputCode.number1 == secretCode1.number2)
     5aa:	04 17       	cp	r16, r20
     5ac:	15 07       	cpc	r17, r21
     5ae:	39 f4       	brne	.+14     	; 0x5be <checkCode+0xd2>
	{
		currentResult.correctNumbes += 1;
     5b0:	ee 24       	eor	r14, r14
     5b2:	e3 94       	inc	r14
     5b4:	f1 2c       	mov	r15, r1
     5b6:	f0 92 41 03 	sts	0x0341, r15	; 0x800341 <currentResult+0x3>
     5ba:	e0 92 40 03 	sts	0x0340, r14	; 0x800340 <currentResult+0x2>
	}
	if(userInputCode.number1 == secretCode1.number3)
     5be:	02 17       	cp	r16, r18
     5c0:	13 07       	cpc	r17, r19
     5c2:	79 f4       	brne	.+30     	; 0x5e2 <checkCode+0xf6>
	{
		currentResult.correctNumbes += 1;
     5c4:	0f 2e       	mov	r0, r31
     5c6:	fe e3       	ldi	r31, 0x3E	; 62
     5c8:	cf 2e       	mov	r12, r31
     5ca:	f3 e0       	ldi	r31, 0x03	; 3
     5cc:	df 2e       	mov	r13, r31
     5ce:	f0 2d       	mov	r31, r0
     5d0:	f6 01       	movw	r30, r12
     5d2:	e2 80       	ldd	r14, Z+2	; 0x02
     5d4:	f3 80       	ldd	r15, Z+3	; 0x03
     5d6:	ff ef       	ldi	r31, 0xFF	; 255
     5d8:	ef 1a       	sub	r14, r31
     5da:	ff 0a       	sbc	r15, r31
     5dc:	f6 01       	movw	r30, r12
     5de:	f3 82       	std	Z+3, r15	; 0x03
     5e0:	e2 82       	std	Z+2, r14	; 0x02
	}
	if(userInputCode.number1 == secretCode1.number4)
     5e2:	0a 15       	cp	r16, r10
     5e4:	1b 05       	cpc	r17, r11
     5e6:	69 f4       	brne	.+26     	; 0x602 <checkCode+0x116>
	{
		currentResult.correctNumbes += 1;
     5e8:	0f 2e       	mov	r0, r31
     5ea:	fe e3       	ldi	r31, 0x3E	; 62
     5ec:	ef 2e       	mov	r14, r31
     5ee:	f3 e0       	ldi	r31, 0x03	; 3
     5f0:	ff 2e       	mov	r15, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	f7 01       	movw	r30, r14
     5f6:	02 81       	ldd	r16, Z+2	; 0x02
     5f8:	13 81       	ldd	r17, Z+3	; 0x03
     5fa:	0f 5f       	subi	r16, 0xFF	; 255
     5fc:	1f 4f       	sbci	r17, 0xFF	; 255
     5fe:	13 83       	std	Z+3, r17	; 0x03
     600:	02 83       	std	Z+2, r16	; 0x02
	}
	
	// check 2 to 1, 3, 4
	if(userInputCode.number2 == secretCode1.number1)
     602:	6c 17       	cp	r22, r28
     604:	7d 07       	cpc	r23, r29
     606:	69 f4       	brne	.+26     	; 0x622 <checkCode+0x136>
	{
		currentResult.correctNumbes += 1;
     608:	0f 2e       	mov	r0, r31
     60a:	fe e3       	ldi	r31, 0x3E	; 62
     60c:	ef 2e       	mov	r14, r31
     60e:	f3 e0       	ldi	r31, 0x03	; 3
     610:	ff 2e       	mov	r15, r31
     612:	f0 2d       	mov	r31, r0
     614:	f7 01       	movw	r30, r14
     616:	02 81       	ldd	r16, Z+2	; 0x02
     618:	13 81       	ldd	r17, Z+3	; 0x03
     61a:	0f 5f       	subi	r16, 0xFF	; 255
     61c:	1f 4f       	sbci	r17, 0xFF	; 255
     61e:	13 83       	std	Z+3, r17	; 0x03
     620:	02 83       	std	Z+2, r16	; 0x02
	}
	if(userInputCode.number2 == secretCode1.number3)
     622:	c2 17       	cp	r28, r18
     624:	d3 07       	cpc	r29, r19
     626:	69 f4       	brne	.+26     	; 0x642 <checkCode+0x156>
	{
		currentResult.correctNumbes += 1;
     628:	0f 2e       	mov	r0, r31
     62a:	fe e3       	ldi	r31, 0x3E	; 62
     62c:	ef 2e       	mov	r14, r31
     62e:	f3 e0       	ldi	r31, 0x03	; 3
     630:	ff 2e       	mov	r15, r31
     632:	f0 2d       	mov	r31, r0
     634:	f7 01       	movw	r30, r14
     636:	02 81       	ldd	r16, Z+2	; 0x02
     638:	13 81       	ldd	r17, Z+3	; 0x03
     63a:	0f 5f       	subi	r16, 0xFF	; 255
     63c:	1f 4f       	sbci	r17, 0xFF	; 255
     63e:	13 83       	std	Z+3, r17	; 0x03
     640:	02 83       	std	Z+2, r16	; 0x02
	}
	if(userInputCode.number2 == secretCode1.number4)
     642:	ca 15       	cp	r28, r10
     644:	db 05       	cpc	r29, r11
     646:	41 f4       	brne	.+16     	; 0x658 <checkCode+0x16c>
	{
		currentResult.correctNumbes += 1;
     648:	0e e3       	ldi	r16, 0x3E	; 62
     64a:	13 e0       	ldi	r17, 0x03	; 3
     64c:	f8 01       	movw	r30, r16
     64e:	c2 81       	ldd	r28, Z+2	; 0x02
     650:	d3 81       	ldd	r29, Z+3	; 0x03
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	d3 83       	std	Z+3, r29	; 0x03
     656:	c2 83       	std	Z+2, r28	; 0x02
	}
	
	// check 3 to 1, 2, 4
	if(userInputCode.number3 == secretCode1.number1)
     658:	6a 17       	cp	r22, r26
     65a:	7b 07       	cpc	r23, r27
     65c:	41 f4       	brne	.+16     	; 0x66e <checkCode+0x182>
	{
		currentResult.correctNumbes += 1;
     65e:	0e e3       	ldi	r16, 0x3E	; 62
     660:	13 e0       	ldi	r17, 0x03	; 3
     662:	f8 01       	movw	r30, r16
     664:	c2 81       	ldd	r28, Z+2	; 0x02
     666:	d3 81       	ldd	r29, Z+3	; 0x03
     668:	21 96       	adiw	r28, 0x01	; 1
     66a:	d3 83       	std	Z+3, r29	; 0x03
     66c:	c2 83       	std	Z+2, r28	; 0x02
	}
	if(userInputCode.number3 == secretCode1.number2)
     66e:	4a 17       	cp	r20, r26
     670:	5b 07       	cpc	r21, r27
     672:	41 f4       	brne	.+16     	; 0x684 <checkCode+0x198>
	{
		currentResult.correctNumbes += 1;
     674:	0e e3       	ldi	r16, 0x3E	; 62
     676:	13 e0       	ldi	r17, 0x03	; 3
     678:	f8 01       	movw	r30, r16
     67a:	c2 81       	ldd	r28, Z+2	; 0x02
     67c:	d3 81       	ldd	r29, Z+3	; 0x03
     67e:	21 96       	adiw	r28, 0x01	; 1
     680:	d3 83       	std	Z+3, r29	; 0x03
     682:	c2 83       	std	Z+2, r28	; 0x02
	}
	if(userInputCode.number3 == secretCode1.number4)
     684:	aa 15       	cp	r26, r10
     686:	bb 05       	cpc	r27, r11
     688:	59 f4       	brne	.+22     	; 0x6a0 <checkCode+0x1b4>
	{
		currentResult.correctNumbes += 1;
     68a:	ae e3       	ldi	r26, 0x3E	; 62
     68c:	b3 e0       	ldi	r27, 0x03	; 3
     68e:	12 96       	adiw	r26, 0x02	; 2
     690:	ed 91       	ld	r30, X+
     692:	fc 91       	ld	r31, X
     694:	13 97       	sbiw	r26, 0x03	; 3
     696:	31 96       	adiw	r30, 0x01	; 1
     698:	13 96       	adiw	r26, 0x03	; 3
     69a:	fc 93       	st	X, r31
     69c:	ee 93       	st	-X, r30
     69e:	12 97       	sbiw	r26, 0x02	; 2
	}
	
	// check 4 to 1, 2, 3
	if(userInputCode.number4 == secretCode1.number1)
     6a0:	68 17       	cp	r22, r24
     6a2:	79 07       	cpc	r23, r25
     6a4:	41 f4       	brne	.+16     	; 0x6b6 <checkCode+0x1ca>
	{
		currentResult.correctNumbes += 1;
     6a6:	ee e3       	ldi	r30, 0x3E	; 62
     6a8:	f3 e0       	ldi	r31, 0x03	; 3
     6aa:	62 81       	ldd	r22, Z+2	; 0x02
     6ac:	73 81       	ldd	r23, Z+3	; 0x03
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	73 83       	std	Z+3, r23	; 0x03
     6b4:	62 83       	std	Z+2, r22	; 0x02
	}
	if(userInputCode.number4 == secretCode1.number2)
     6b6:	48 17       	cp	r20, r24
     6b8:	59 07       	cpc	r21, r25
     6ba:	41 f4       	brne	.+16     	; 0x6cc <checkCode+0x1e0>
	{
		currentResult.correctNumbes += 1;
     6bc:	ee e3       	ldi	r30, 0x3E	; 62
     6be:	f3 e0       	ldi	r31, 0x03	; 3
     6c0:	42 81       	ldd	r20, Z+2	; 0x02
     6c2:	53 81       	ldd	r21, Z+3	; 0x03
     6c4:	4f 5f       	subi	r20, 0xFF	; 255
     6c6:	5f 4f       	sbci	r21, 0xFF	; 255
     6c8:	53 83       	std	Z+3, r21	; 0x03
     6ca:	42 83       	std	Z+2, r20	; 0x02
	}
	if(userInputCode.number4 == secretCode1.number3)
     6cc:	28 17       	cp	r18, r24
     6ce:	39 07       	cpc	r19, r25
     6d0:	39 f4       	brne	.+14     	; 0x6e0 <checkCode+0x1f4>
	{
		currentResult.correctNumbes += 1;
     6d2:	ee e3       	ldi	r30, 0x3E	; 62
     6d4:	f3 e0       	ldi	r31, 0x03	; 3
     6d6:	82 81       	ldd	r24, Z+2	; 0x02
     6d8:	93 81       	ldd	r25, Z+3	; 0x03
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	93 83       	std	Z+3, r25	; 0x03
     6de:	82 83       	std	Z+2, r24	; 0x02
	}
}
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	cf 90       	pop	r12
     6f0:	bf 90       	pop	r11
     6f2:	af 90       	pop	r10
     6f4:	08 95       	ret

000006f6 <getUserCode>:
	_delay_ms(100);
	turns --;
}

int getUserCode(const char * _inputString)
{
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	fc 01       	movw	r30, r24
	int correctInput = 1;
	mm_code_t inputCode = {0, 0, 0, 0};
	if (isdigit(_inputString[0]))
     708:	80 81       	ld	r24, Z
     70a:	9f ec       	ldi	r25, 0xCF	; 207
     70c:	98 0f       	add	r25, r24
     70e:	96 30       	cpi	r25, 0x06	; 6
     710:	40 f4       	brcc	.+16     	; 0x722 <getUserCode+0x2c>
	{
		if(_inputString[0] - '0' > 0 && _inputString[0] - '0' < 7)
		{
			inputCode.number1 = _inputString[0] - '0';
     712:	c8 2e       	mov	r12, r24
     714:	d1 2c       	mov	r13, r1
     716:	20 e3       	ldi	r18, 0x30	; 48
     718:	c2 1a       	sub	r12, r18
     71a:	d1 08       	sbc	r13, r1
	turns --;
}

int getUserCode(const char * _inputString)
{
	int correctInput = 1;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	04 c0       	rjmp	.+8      	; 0x72a <getUserCode+0x34>
	mm_code_t inputCode = {0, 0, 0, 0};
     722:	c1 2c       	mov	r12, r1
     724:	d1 2c       	mov	r13, r1
			correctInput = 0;
		}
	}
	else
	{
		correctInput = 0;
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if (isdigit(_inputString[1]))
     72a:	21 81       	ldd	r18, Z+1	; 0x01
     72c:	3f ec       	ldi	r19, 0xCF	; 207
     72e:	32 0f       	add	r19, r18
     730:	36 30       	cpi	r19, 0x06	; 6
     732:	30 f4       	brcc	.+12     	; 0x740 <getUserCode+0x4a>
	{
		if(_inputString[1] - '0' > 0 && _inputString[1] - '0' < 7)
		{
			inputCode.number2 = _inputString[1] - '0';
     734:	e2 2e       	mov	r14, r18
     736:	f1 2c       	mov	r15, r1
     738:	20 e3       	ldi	r18, 0x30	; 48
     73a:	e2 1a       	sub	r14, r18
     73c:	f1 08       	sbc	r15, r1
     73e:	04 c0       	rjmp	.+8      	; 0x748 <getUserCode+0x52>
}

int getUserCode(const char * _inputString)
{
	int correctInput = 1;
	mm_code_t inputCode = {0, 0, 0, 0};
     740:	e1 2c       	mov	r14, r1
     742:	f1 2c       	mov	r15, r1
			correctInput = 0;
		}
	}
	else
	{
		correctInput = 0;
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if (isdigit(_inputString[2]))
     748:	02 81       	ldd	r16, Z+2	; 0x02
     74a:	2f ec       	ldi	r18, 0xCF	; 207
     74c:	20 0f       	add	r18, r16
     74e:	26 30       	cpi	r18, 0x06	; 6
     750:	20 f4       	brcc	.+8      	; 0x75a <getUserCode+0x64>
	{
		if(_inputString[2] - '0' > 0 && _inputString[2] - '0' < 7)
		{
			inputCode.number3 = _inputString[2] - '0';
     752:	10 e0       	ldi	r17, 0x00	; 0
     754:	00 53       	subi	r16, 0x30	; 48
     756:	11 09       	sbc	r17, r1
     758:	04 c0       	rjmp	.+8      	; 0x762 <getUserCode+0x6c>
}

int getUserCode(const char * _inputString)
{
	int correctInput = 1;
	mm_code_t inputCode = {0, 0, 0, 0};
     75a:	00 e0       	ldi	r16, 0x00	; 0
     75c:	10 e0       	ldi	r17, 0x00	; 0
			correctInput = 0;
		}
	}
	else
	{
		correctInput = 0;
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	if (isdigit(_inputString[3]))
     762:	c3 81       	ldd	r28, Z+3	; 0x03
     764:	2f ec       	ldi	r18, 0xCF	; 207
     766:	2c 0f       	add	r18, r28
     768:	26 30       	cpi	r18, 0x06	; 6
     76a:	28 f4       	brcc	.+10     	; 0x776 <getUserCode+0x80>
	{
		if(_inputString[3] - '0' > 0 && _inputString[3] - '0' < 7)
		{
			inputCode.number4 = _inputString[3] - '0';
     76c:	d0 e0       	ldi	r29, 0x00	; 0
     76e:	e0 97       	sbiw	r28, 0x30	; 48
	else
	{
		correctInput = 0;
	}
	
	if (!correctInput)
     770:	00 97       	sbiw	r24, 0x00	; 0
     772:	49 f4       	brne	.+18     	; 0x786 <getUserCode+0x90>
     774:	02 c0       	rjmp	.+4      	; 0x77a <getUserCode+0x84>
     776:	c0 e0       	ldi	r28, 0x00	; 0
     778:	d0 e0       	ldi	r29, 0x00	; 0
	{
		
		TransmitString("only use the numbers 1 <-> 6  \r\n");
     77a:	81 e6       	ldi	r24, 0x61	; 97
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	90 e0       	ldi	r25, 0x00	; 0
		//TransmitString("try again\r\n");
	}
	userInputCode = inputCode;
     786:	e2 e2       	ldi	r30, 0x22	; 34
     788:	f3 e0       	ldi	r31, 0x03	; 3
     78a:	d1 82       	std	Z+1, r13	; 0x01
     78c:	c0 82       	st	Z, r12
     78e:	f3 82       	std	Z+3, r15	; 0x03
     790:	e2 82       	std	Z+2, r14	; 0x02
     792:	15 83       	std	Z+5, r17	; 0x05
     794:	04 83       	std	Z+4, r16	; 0x04
     796:	d7 83       	std	Z+7, r29	; 0x07
     798:	c6 83       	std	Z+6, r28	; 0x06
	return correctInput;
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	1f 91       	pop	r17
     7a0:	0f 91       	pop	r16
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	cf 90       	pop	r12
     7aa:	08 95       	ret

000007ac <clearLists>:
		resetPressed = 0;
	}
}

void clearLists()
{
     7ac:	e6 e7       	ldi	r30, 0x76	; 118
     7ae:	f3 e0       	ldi	r31, 0x03	; 3
     7b0:	a4 e4       	ldi	r26, 0x44	; 68
     7b2:	b3 e0       	ldi	r27, 0x03	; 3
     7b4:	86 ed       	ldi	r24, 0xD6	; 214
     7b6:	93 e0       	ldi	r25, 0x03	; 3
	for(int i = 0; i < 12; i++)
	{
		userCodeHistory[i].number1 = 0;
     7b8:	11 82       	std	Z+1, r1	; 0x01
     7ba:	10 82       	st	Z, r1
		userCodeHistory[i].number2 = 0;
     7bc:	13 82       	std	Z+3, r1	; 0x03
     7be:	12 82       	std	Z+2, r1	; 0x02
		userCodeHistory[i].number3 = 0;
     7c0:	15 82       	std	Z+5, r1	; 0x05
     7c2:	14 82       	std	Z+4, r1	; 0x04
		userCodeHistory[i].number4 = 0;
     7c4:	17 82       	std	Z+7, r1	; 0x07
     7c6:	16 82       	std	Z+6, r1	; 0x06
		userResultHistory[i].correctLocations = 0;
     7c8:	11 96       	adiw	r26, 0x01	; 1
     7ca:	1c 92       	st	X, r1
     7cc:	1e 92       	st	-X, r1
		userResultHistory[i].correctNumbes = 0;
     7ce:	13 96       	adiw	r26, 0x03	; 3
     7d0:	1c 92       	st	X, r1
     7d2:	1e 92       	st	-X, r1
     7d4:	12 97       	sbiw	r26, 0x02	; 2
     7d6:	38 96       	adiw	r30, 0x08	; 8
     7d8:	14 96       	adiw	r26, 0x04	; 4
	}
}

void clearLists()
{
	for(int i = 0; i < 12; i++)
     7da:	e8 17       	cp	r30, r24
     7dc:	f9 07       	cpc	r31, r25
     7de:	61 f7       	brne	.-40     	; 0x7b8 <clearLists+0xc>
		userCodeHistory[i].number3 = 0;
		userCodeHistory[i].number4 = 0;
		userResultHistory[i].correctLocations = 0;
		userResultHistory[i].correctNumbes = 0;
	}
}
     7e0:	08 95       	ret

000007e2 <__vector_3>:
#include <stdio.h>
#include "infoLeds.h"

//Reset pin interrupt
ISR(PCINT0_vect)
{
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	2f 93       	push	r18
     7ee:	3f 93       	push	r19
     7f0:	4f 93       	push	r20
     7f2:	5f 93       	push	r21
     7f4:	6f 93       	push	r22
     7f6:	7f 93       	push	r23
     7f8:	8f 93       	push	r24
     7fa:	9f 93       	push	r25
     7fc:	af 93       	push	r26
     7fe:	bf 93       	push	r27
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31
	if (SWITCH_PRESSED)
     808:	1f 99       	sbic	0x03, 7	; 3
     80a:	3c c0       	rjmp	.+120    	; 0x884 <__vector_3+0xa2>
	{
		//if the main loop was waiting for input
		if (resetPressed)
     80c:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <resetPressed>
     810:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <resetPressed+0x1>
     814:	89 2b       	or	r24, r25
     816:	31 f0       	breq	.+12     	; 0x824 <__vector_3+0x42>
		{
			//break the input loop
			reset = 1;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <reset+0x1>
     820:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <reset>
		}
		//reset the history
		clearLists();
     824:	0e 94 d6 03 	call	0x7ac	; 0x7ac <clearLists>
		//clear timer for LED
		turnTimer1Off();
     828:	0e 94 55 01 	call	0x2aa	; 0x2aa <turnTimer1Off>
		turnTimer2Off();
     82c:	0e 94 3f 01 	call	0x27e	; 0x27e <turnTimer2Off>
		//fill the secret code struct with random numbers
		generateRandomCode(&secretCode1);
     830:	88 e1       	ldi	r24, 0x18	; 24
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	0e 94 44 02 	call	0x488	; 0x488 <generateRandomCode>
		//for debugging: print the generated code
		TransmitString("\r\n\r\nDEBUG :: ");
     838:	82 e8       	ldi	r24, 0x82	; 130
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
		TransmitByte('0' + secretCode1.number1);
     840:	c8 e1       	ldi	r28, 0x18	; 24
     842:	d3 e0       	ldi	r29, 0x03	; 3
     844:	88 81       	ld	r24, Y
     846:	80 5d       	subi	r24, 0xD0	; 208
     848:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
		TransmitByte('0' + secretCode1.number2);
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	80 5d       	subi	r24, 0xD0	; 208
     850:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
		TransmitByte('0' + secretCode1.number3);
     854:	8c 81       	ldd	r24, Y+4	; 0x04
     856:	80 5d       	subi	r24, 0xD0	; 208
     858:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
		TransmitByte('0' + secretCode1.number4);
     85c:	8e 81       	ldd	r24, Y+6	; 0x06
     85e:	80 5d       	subi	r24, 0xD0	; 208
     860:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
		TransmitString("\r\n");
     864:	81 ec       	ldi	r24, 0xC1	; 193
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
		//TransmitString("New game stared\r\n");
		
		//reset the turns
		turns = 12;
     86c:	8c e0       	ldi	r24, 0x0C	; 12
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <turns+0x1>
     874:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <turns>
		//allow main program to run again
		resetPressed = 1;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <resetPressed+0x1>
     880:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <resetPressed>
	}
}
     884:	ff 91       	pop	r31
     886:	ef 91       	pop	r30
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	bf 91       	pop	r27
     88e:	af 91       	pop	r26
     890:	9f 91       	pop	r25
     892:	8f 91       	pop	r24
     894:	7f 91       	pop	r23
     896:	6f 91       	pop	r22
     898:	5f 91       	pop	r21
     89a:	4f 91       	pop	r20
     89c:	3f 91       	pop	r19
     89e:	2f 91       	pop	r18
     8a0:	0f 90       	pop	r0
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	0f 90       	pop	r0
     8a6:	1f 90       	pop	r1
     8a8:	18 95       	reti

000008aa <printHistory>:
		userResultHistory[i].correctNumbes = 0;
	}
}

void printHistory()
{
     8aa:	4f 92       	push	r4
     8ac:	5f 92       	push	r5
     8ae:	6f 92       	push	r6
     8b0:	7f 92       	push	r7
     8b2:	8f 92       	push	r8
     8b4:	9f 92       	push	r9
     8b6:	af 92       	push	r10
     8b8:	bf 92       	push	r11
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	6e 97       	sbiw	r28, 0x1e	; 30
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
	TransmitString("CP = correct placed, WP = wrong placed\r\n");
     8da:	80 e9       	ldi	r24, 0x90	; 144
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     8e2:	2f ef       	ldi	r18, 0xFF	; 255
     8e4:	31 ee       	ldi	r19, 0xE1	; 225
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	21 50       	subi	r18, 0x01	; 1
     8ea:	30 40       	sbci	r19, 0x00	; 0
     8ec:	80 40       	sbci	r24, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <printHistory+0x3e>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <printHistory+0x48>
     8f2:	00 00       	nop
	_delay_ms(100);
	for(int i = 0; i < 12 - turns; i++)
     8f4:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <turns>
     8f8:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <turns+0x1>
     8fc:	8c e0       	ldi	r24, 0x0C	; 12
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	82 1b       	sub	r24, r18
     902:	93 0b       	sbc	r25, r19
     904:	18 16       	cp	r1, r24
     906:	19 06       	cpc	r1, r25
     908:	0c f0       	brlt	.+2      	; 0x90c <__stack+0xd>
     90a:	5b c0       	rjmp	.+182    	; 0x9c2 <__stack+0xc3>
     90c:	06 e7       	ldi	r16, 0x76	; 118
     90e:	13 e0       	ldi	r17, 0x03	; 3
     910:	e1 2c       	mov	r14, r1
     912:	f1 2c       	mov	r15, r1
	{
		char buffer[30];
		sprintf(buffer, "%s%d%s%d%d%d%d\r\n", "turn ", i + 1, ": \tyou played: ",
     914:	0f 2e       	mov	r0, r31
     916:	f9 eb       	ldi	r31, 0xB9	; 185
     918:	af 2e       	mov	r10, r31
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	bf 2e       	mov	r11, r31
     91e:	f0 2d       	mov	r31, r0
     920:	0f 2e       	mov	r0, r31
     922:	f9 ec       	ldi	r31, 0xC9	; 201
     924:	6f 2e       	mov	r6, r31
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	7f 2e       	mov	r7, r31
     92a:	f0 2d       	mov	r31, r0
     92c:	0f 2e       	mov	r0, r31
     92e:	ff ec       	ldi	r31, 0xCF	; 207
     930:	4f 2e       	mov	r4, r31
     932:	f1 e0       	ldi	r31, 0x01	; 1
     934:	5f 2e       	mov	r5, r31
     936:	f0 2d       	mov	r31, r0
     938:	fe 01       	movw	r30, r28
     93a:	31 96       	adiw	r30, 0x01	; 1
     93c:	6f 01       	movw	r12, r30

void printHistory()
{
	TransmitString("CP = correct placed, WP = wrong placed\r\n");
	_delay_ms(100);
	for(int i = 0; i < 12 - turns; i++)
     93e:	0f 2e       	mov	r0, r31
     940:	fc e0       	ldi	r31, 0x0C	; 12
     942:	8f 2e       	mov	r8, r31
     944:	91 2c       	mov	r9, r1
     946:	f0 2d       	mov	r31, r0
	{
		char buffer[30];
		sprintf(buffer, "%s%d%s%d%d%d%d\r\n", "turn ", i + 1, ": \tyou played: ",
     948:	ff ef       	ldi	r31, 0xFF	; 255
     94a:	ef 1a       	sub	r14, r31
     94c:	ff 0a       	sbc	r15, r31
     94e:	f8 01       	movw	r30, r16
     950:	87 81       	ldd	r24, Z+7	; 0x07
     952:	8f 93       	push	r24
     954:	86 81       	ldd	r24, Z+6	; 0x06
     956:	8f 93       	push	r24
     958:	85 81       	ldd	r24, Z+5	; 0x05
     95a:	8f 93       	push	r24
     95c:	84 81       	ldd	r24, Z+4	; 0x04
     95e:	8f 93       	push	r24
     960:	83 81       	ldd	r24, Z+3	; 0x03
     962:	8f 93       	push	r24
     964:	82 81       	ldd	r24, Z+2	; 0x02
     966:	8f 93       	push	r24
     968:	81 81       	ldd	r24, Z+1	; 0x01
     96a:	8f 93       	push	r24
     96c:	80 81       	ld	r24, Z
     96e:	8f 93       	push	r24
     970:	bf 92       	push	r11
     972:	af 92       	push	r10
     974:	ff 92       	push	r15
     976:	ef 92       	push	r14
     978:	7f 92       	push	r7
     97a:	6f 92       	push	r6
     97c:	5f 92       	push	r5
     97e:	4f 92       	push	r4
     980:	df 92       	push	r13
     982:	cf 92       	push	r12
     984:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <sprintf>
				userCodeHistory[i].number1, userCodeHistory[i].number2, userCodeHistory[i].number3, userCodeHistory[i].number4);
		TransmitString(buffer);
     988:	c6 01       	movw	r24, r12
     98a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     98e:	ff ef       	ldi	r31, 0xFF	; 255
     990:	21 ee       	ldi	r18, 0xE1	; 225
     992:	34 e0       	ldi	r19, 0x04	; 4
     994:	f1 50       	subi	r31, 0x01	; 1
     996:	20 40       	sbci	r18, 0x00	; 0
     998:	30 40       	sbci	r19, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <__stack+0x95>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <__stack+0x9f>
     99e:	00 00       	nop

void printHistory()
{
	TransmitString("CP = correct placed, WP = wrong placed\r\n");
	_delay_ms(100);
	for(int i = 0; i < 12 - turns; i++)
     9a0:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <turns>
     9a4:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <turns+0x1>
     9a8:	08 5f       	subi	r16, 0xF8	; 248
     9aa:	1f 4f       	sbci	r17, 0xFF	; 255
     9ac:	f4 01       	movw	r30, r8
     9ae:	e8 1b       	sub	r30, r24
     9b0:	f9 0b       	sbc	r31, r25
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	ee 16       	cp	r14, r30
     9be:	ff 06       	cpc	r15, r31
     9c0:	1c f2       	brlt	.-122    	; 0x948 <__stack+0x49>
		sprintf(buffer, "%s%d%s%d%d%d%d\r\n", "turn ", i + 1, ": \tyou played: ",
				userCodeHistory[i].number1, userCodeHistory[i].number2, userCodeHistory[i].number3, userCodeHistory[i].number4);
		TransmitString(buffer);
		_delay_ms(100);
	}
}
     9c2:	6e 96       	adiw	r28, 0x1e	; 30
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	f8 94       	cli
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	cf 90       	pop	r12
     9de:	bf 90       	pop	r11
     9e0:	af 90       	pop	r10
     9e2:	9f 90       	pop	r9
     9e4:	8f 90       	pop	r8
     9e6:	7f 90       	pop	r7
     9e8:	6f 90       	pop	r6
     9ea:	5f 90       	pop	r5
     9ec:	4f 90       	pop	r4
     9ee:	08 95       	ret

000009f0 <checkTurn>:
	userInputCode = inputCode;
	return correctInput;
}

void checkTurn()
{
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	a8 97       	sbiw	r28, 0x28	; 40
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
	userCodeHistory[11 -turns ] = userInputCode;
     a08:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <turns>
     a0c:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <turns+0x1>
     a10:	8b e0       	ldi	r24, 0x0B	; 11
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	dc 01       	movw	r26, r24
     a16:	a2 1b       	sub	r26, r18
     a18:	b3 0b       	sbc	r27, r19
     a1a:	aa 0f       	add	r26, r26
     a1c:	bb 1f       	adc	r27, r27
     a1e:	aa 0f       	add	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	aa 0f       	add	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	aa 58       	subi	r26, 0x8A	; 138
     a28:	bc 4f       	sbci	r27, 0xFC	; 252
     a2a:	28 e0       	ldi	r18, 0x08	; 8
     a2c:	e2 e2       	ldi	r30, 0x22	; 34
     a2e:	f3 e0       	ldi	r31, 0x03	; 3
     a30:	01 90       	ld	r0, Z+
     a32:	0d 92       	st	X+, r0
     a34:	2a 95       	dec	r18
     a36:	e1 f7       	brne	.-8      	; 0xa30 <checkTurn+0x40>
	userResultHistory[11 - turns ].correctLocations = currentResult.correctLocations;
     a38:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <turns>
     a3c:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <turns+0x1>
     a40:	ae e3       	ldi	r26, 0x3E	; 62
     a42:	b3 e0       	ldi	r27, 0x03	; 3
     a44:	2d 91       	ld	r18, X+
     a46:	3c 91       	ld	r19, X
     a48:	11 97       	sbiw	r26, 0x01	; 1
     a4a:	fc 01       	movw	r30, r24
     a4c:	e4 1b       	sub	r30, r20
     a4e:	f5 0b       	sbc	r31, r21
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	ec 5b       	subi	r30, 0xBC	; 188
     a5a:	fc 4f       	sbci	r31, 0xFC	; 252
     a5c:	31 83       	std	Z+1, r19	; 0x01
     a5e:	20 83       	st	Z, r18
	userResultHistory[11 - turns ].correctNumbes = currentResult.correctNumbes;
     a60:	40 91 16 03 	lds	r20, 0x0316	; 0x800316 <turns>
     a64:	50 91 17 03 	lds	r21, 0x0317	; 0x800317 <turns+0x1>
     a68:	fc 01       	movw	r30, r24
     a6a:	e4 1b       	sub	r30, r20
     a6c:	f5 0b       	sbc	r31, r21
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	ec 5b       	subi	r30, 0xBC	; 188
     a78:	fc 4f       	sbci	r31, 0xFC	; 252
     a7a:	12 96       	adiw	r26, 0x02	; 2
     a7c:	8d 91       	ld	r24, X+
     a7e:	9c 91       	ld	r25, X
     a80:	13 97       	sbiw	r26, 0x03	; 3
     a82:	93 83       	std	Z+3, r25	; 0x03
     a84:	82 83       	std	Z+2, r24	; 0x02
	if(currentResult.correctLocations == 4)
     a86:	24 30       	cpi	r18, 0x04	; 4
     a88:	31 05       	cpc	r19, r1
     a8a:	09 f0       	breq	.+2      	; 0xa8e <checkTurn+0x9e>
     a8c:	71 c0       	rjmp	.+226    	; 0xb70 <checkTurn+0x180>
	{
		timer2_Frequency(1);
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 4a 01 	call	0x294	; 0x294 <timer2_Frequency>
		TransmitString("You won the game!!\r\n");
     a96:	80 ee       	ldi	r24, 0xE0	; 224
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     a9e:	2f ef       	ldi	r18, 0xFF	; 255
     aa0:	81 ee       	ldi	r24, 0xE1	; 225
     aa2:	94 e0       	ldi	r25, 0x04	; 4
     aa4:	21 50       	subi	r18, 0x01	; 1
     aa6:	80 40       	sbci	r24, 0x00	; 0
     aa8:	90 40       	sbci	r25, 0x00	; 0
     aaa:	e1 f7       	brne	.-8      	; 0xaa4 <checkTurn+0xb4>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <checkTurn+0xbe>
     aae:	00 00       	nop
		_delay_ms(100);
		printHistory();
     ab0:	0e 94 55 04 	call	0x8aa	; 0x8aa <printHistory>
		char buffer[40];
		if(12 - turns == 1)
     ab4:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <turns>
     ab8:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <turns+0x1>
     abc:	0b 97       	sbiw	r24, 0x0b	; 11
     abe:	11 f5       	brne	.+68     	; 0xb04 <checkTurn+0x114>
		{
			sprintf(buffer, "%s%d%s\r\n", "you did it in ", 12 - turns, " turn");
     ac0:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <turns>
     ac4:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <turns+0x1>
     ac8:	85 ef       	ldi	r24, 0xF5	; 245
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	8c e0       	ldi	r24, 0x0C	; 12
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	82 1b       	sub	r24, r18
     ad6:	93 0b       	sbc	r25, r19
     ad8:	9f 93       	push	r25
     ada:	8f 93       	push	r24
     adc:	8b ef       	ldi	r24, 0xFB	; 251
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	8a e0       	ldi	r24, 0x0A	; 10
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	9f 93       	push	r25
     aea:	8f 93       	push	r24
     aec:	ce 01       	movw	r24, r28
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	9f 93       	push	r25
     af2:	8f 93       	push	r24
     af4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <sprintf>
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	21 c0       	rjmp	.+66     	; 0xb46 <checkTurn+0x156>
		}
		else
		{
			sprintf(buffer, "%s%d%s\r\n", "you did it in ", 12 - turns, " turns");
     b04:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <turns>
     b08:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <turns+0x1>
     b0c:	83 e1       	ldi	r24, 0x13	; 19
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	8c e0       	ldi	r24, 0x0C	; 12
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	82 1b       	sub	r24, r18
     b1a:	93 0b       	sbc	r25, r19
     b1c:	9f 93       	push	r25
     b1e:	8f 93       	push	r24
     b20:	8b ef       	ldi	r24, 0xFB	; 251
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	9f 93       	push	r25
     b26:	8f 93       	push	r24
     b28:	8a e0       	ldi	r24, 0x0A	; 10
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	9f 93       	push	r25
     b2e:	8f 93       	push	r24
     b30:	ce 01       	movw	r24, r28
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	9f 93       	push	r25
     b36:	8f 93       	push	r24
     b38:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <sprintf>
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
		}
		TransmitString(buffer);
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	e1 ee       	ldi	r30, 0xE1	; 225
     b52:	f4 e0       	ldi	r31, 0x04	; 4
     b54:	91 50       	subi	r25, 0x01	; 1
     b56:	e0 40       	sbci	r30, 0x00	; 0
     b58:	f0 40       	sbci	r31, 0x00	; 0
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <checkTurn+0x164>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <checkTurn+0x16e>
     b5e:	00 00       	nop
		_delay_ms(100);
		TransmitString("press reset to start again\r\n");
     b60:	8a e1       	ldi	r24, 0x1A	; 26
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
		resetPressed = 0;
     b68:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <resetPressed+0x1>
     b6c:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <resetPressed>
	}
	
	userInputCode.number1 = 0;
     b70:	e2 e2       	ldi	r30, 0x22	; 34
     b72:	f3 e0       	ldi	r31, 0x03	; 3
     b74:	11 82       	std	Z+1, r1	; 0x01
     b76:	10 82       	st	Z, r1
	userInputCode.number2 = 0;
     b78:	13 82       	std	Z+3, r1	; 0x03
     b7a:	12 82       	std	Z+2, r1	; 0x02
	userInputCode.number3 = 0;
     b7c:	15 82       	std	Z+5, r1	; 0x05
     b7e:	14 82       	std	Z+4, r1	; 0x04
	userInputCode.number4 = 0;
     b80:	17 82       	std	Z+7, r1	; 0x07
     b82:	16 82       	std	Z+6, r1	; 0x06
	currentResult.correctLocations = 0;
     b84:	ee e3       	ldi	r30, 0x3E	; 62
     b86:	f3 e0       	ldi	r31, 0x03	; 3
     b88:	11 82       	std	Z+1, r1	; 0x01
     b8a:	10 82       	st	Z, r1
	currentResult.correctNumbes = 0;
     b8c:	13 82       	std	Z+3, r1	; 0x03
     b8e:	12 82       	std	Z+2, r1	; 0x02
	
	if (turns == 0)
     b90:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <turns>
     b94:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <turns+0x1>
     b98:	89 2b       	or	r24, r25
     b9a:	09 f0       	breq	.+2      	; 0xb9e <checkTurn+0x1ae>
     b9c:	42 c0       	rjmp	.+132    	; 0xc22 <checkTurn+0x232>
	{
		timer2_Frequency(2);
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 4a 01 	call	0x294	; 0x294 <timer2_Frequency>
		TransmitString("\r\n");
     ba6:	81 ec       	ldi	r24, 0xC1	; 193
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
		printHistory();
     bae:	0e 94 55 04 	call	0x8aa	; 0x8aa <printHistory>
     bb2:	2f ef       	ldi	r18, 0xFF	; 255
     bb4:	81 ee       	ldi	r24, 0xE1	; 225
     bb6:	94 e0       	ldi	r25, 0x04	; 4
     bb8:	21 50       	subi	r18, 0x01	; 1
     bba:	80 40       	sbci	r24, 0x00	; 0
     bbc:	90 40       	sbci	r25, 0x00	; 0
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <checkTurn+0x1c8>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <checkTurn+0x1d2>
     bc2:	00 00       	nop
		_delay_ms(100);
		TransmitString("winning code was : ");
     bc4:	87 e3       	ldi	r24, 0x37	; 55
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
		TransmitByte('0' + secretCode1.number1);
     bcc:	08 e1       	ldi	r16, 0x18	; 24
     bce:	13 e0       	ldi	r17, 0x03	; 3
     bd0:	f8 01       	movw	r30, r16
     bd2:	80 81       	ld	r24, Z
     bd4:	80 5d       	subi	r24, 0xD0	; 208
     bd6:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
		TransmitByte('0' + secretCode1.number2);
     bda:	f8 01       	movw	r30, r16
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	80 5d       	subi	r24, 0xD0	; 208
     be0:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
		TransmitByte('0' + secretCode1.number3);
     be4:	f8 01       	movw	r30, r16
     be6:	84 81       	ldd	r24, Z+4	; 0x04
     be8:	80 5d       	subi	r24, 0xD0	; 208
     bea:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
		TransmitByte('0' + secretCode1.number4);
     bee:	f8 01       	movw	r30, r16
     bf0:	86 81       	ldd	r24, Z+6	; 0x06
     bf2:	80 5d       	subi	r24, 0xD0	; 208
     bf4:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
		TransmitString("\r\n");
     bf8:	81 ec       	ldi	r24, 0xC1	; 193
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     c00:	ff ef       	ldi	r31, 0xFF	; 255
     c02:	21 ee       	ldi	r18, 0xE1	; 225
     c04:	84 e0       	ldi	r24, 0x04	; 4
     c06:	f1 50       	subi	r31, 0x01	; 1
     c08:	20 40       	sbci	r18, 0x00	; 0
     c0a:	80 40       	sbci	r24, 0x00	; 0
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <checkTurn+0x216>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <checkTurn+0x220>
     c10:	00 00       	nop
		_delay_ms(100);
		TransmitString("you lose press reset to try again\r\n");
     c12:	8b e4       	ldi	r24, 0x4B	; 75
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
		resetPressed = 0;
     c1a:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <resetPressed+0x1>
     c1e:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <resetPressed>
	}
}
     c22:	a8 96       	adiw	r28, 0x28	; 40
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	de bf       	out	0x3e, r29	; 62
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	cd bf       	out	0x3d, r28	; 61
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	08 95       	ret

00000c38 <setLedSetting>:
	TransmitString("\r\n\r\n");
	//ReceiveByte();
}

void setLedSetting()
{
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	2a 97       	sbiw	r28, 0x0a	; 10
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
	pinStates[0]=0;
     c50:	e6 ec       	ldi	r30, 0xC6	; 198
     c52:	f2 e0       	ldi	r31, 0x02	; 2
     c54:	11 82       	std	Z+1, r1	; 0x01
     c56:	10 82       	st	Z, r1
	pinStates[1]=0;
     c58:	13 82       	std	Z+3, r1	; 0x03
     c5a:	12 82       	std	Z+2, r1	; 0x02
	pinStates[2]=0;
     c5c:	15 82       	std	Z+5, r1	; 0x05
     c5e:	14 82       	std	Z+4, r1	; 0x04
	pinStates[3]=0;
     c60:	17 82       	std	Z+7, r1	; 0x07
     c62:	16 82       	std	Z+6, r1	; 0x06
	int maxLEds = 4;
	int ledsLeft = maxLEds - currentResult.correctLocations;
     c64:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <currentResult>
     c68:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <currentResult+0x1>
     c6c:	64 e0       	ldi	r22, 0x04	; 4
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	68 1b       	sub	r22, r24
     c72:	79 0b       	sbc	r23, r25
	for(int i = 0; i < currentResult.correctLocations; i++)
     c74:	18 16       	cp	r1, r24
     c76:	19 06       	cpc	r1, r25
     c78:	84 f4       	brge	.+32     	; 0xc9a <setLedSetting+0x62>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
	{
		pinStates[i]=1;
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	f9 01       	movw	r30, r18
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	ea 53       	subi	r30, 0x3A	; 58
     c8a:	fd 4f       	sbci	r31, 0xFD	; 253
     c8c:	51 83       	std	Z+1, r21	; 0x01
     c8e:	40 83       	st	Z, r20
	pinStates[1]=0;
	pinStates[2]=0;
	pinStates[3]=0;
	int maxLEds = 4;
	int ledsLeft = maxLEds - currentResult.correctLocations;
	for(int i = 0; i < currentResult.correctLocations; i++)
     c90:	2f 5f       	subi	r18, 0xFF	; 255
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	82 17       	cp	r24, r18
     c96:	93 07       	cpc	r25, r19
     c98:	a1 f7       	brne	.-24     	; 0xc82 <setLedSetting+0x4a>
	{
		pinStates[i]=1;
	}
	if(ledsLeft > 0)
     c9a:	16 16       	cp	r1, r22
     c9c:	17 06       	cpc	r1, r23
     c9e:	e4 f4       	brge	.+56     	; 0xcd8 <setLedSetting+0xa0>
	{
		for(int i = currentResult.correctLocations; i < (currentResult.correctLocations + currentResult.correctNumbes) && i < 4; i++)
     ca0:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <currentResult+0x2>
     ca4:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <currentResult+0x3>
     ca8:	28 0f       	add	r18, r24
     caa:	39 1f       	adc	r19, r25
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	9c f4       	brge	.+38     	; 0xcd8 <setLedSetting+0xa0>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	91 05       	cpc	r25, r1
     cb6:	84 f4       	brge	.+32     	; 0xcd8 <setLedSetting+0xa0>
		{
			pinStates[i]=2;
     cb8:	42 e0       	ldi	r20, 0x02	; 2
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	fc 01       	movw	r30, r24
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ea 53       	subi	r30, 0x3A	; 58
     cc4:	fd 4f       	sbci	r31, 0xFD	; 253
     cc6:	51 83       	std	Z+1, r21	; 0x01
     cc8:	40 83       	st	Z, r20
	{
		pinStates[i]=1;
	}
	if(ledsLeft > 0)
	{
		for(int i = currentResult.correctLocations; i < (currentResult.correctLocations + currentResult.correctNumbes) && i < 4; i++)
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	82 17       	cp	r24, r18
     cce:	93 07       	cpc	r25, r19
     cd0:	1c f4       	brge	.+6      	; 0xcd8 <setLedSetting+0xa0>
     cd2:	84 30       	cpi	r24, 0x04	; 4
     cd4:	91 05       	cpc	r25, r1
     cd6:	91 f7       	brne	.-28     	; 0xcbc <setLedSetting+0x84>
		{
			pinStates[i]=2;
		}
	}
	char bufferSTR[10];
	sprintf(bufferSTR, "%d %d %d %d\r\n", pinStates[0], pinStates[1], pinStates[2], pinStates[3]);
     cd8:	e6 ec       	ldi	r30, 0xC6	; 198
     cda:	f2 e0       	ldi	r31, 0x02	; 2
     cdc:	66 81       	ldd	r22, Z+6	; 0x06
     cde:	77 81       	ldd	r23, Z+7	; 0x07
     ce0:	44 81       	ldd	r20, Z+4	; 0x04
     ce2:	55 81       	ldd	r21, Z+5	; 0x05
     ce4:	22 81       	ldd	r18, Z+2	; 0x02
     ce6:	33 81       	ldd	r19, Z+3	; 0x03
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	7f 93       	push	r23
     cee:	6f 93       	push	r22
     cf0:	5f 93       	push	r21
     cf2:	4f 93       	push	r20
     cf4:	3f 93       	push	r19
     cf6:	2f 93       	push	r18
     cf8:	9f 93       	push	r25
     cfa:	8f 93       	push	r24
     cfc:	8f e6       	ldi	r24, 0x6F	; 111
     cfe:	92 e0       	ldi	r25, 0x02	; 2
     d00:	9f 93       	push	r25
     d02:	8f 93       	push	r24
     d04:	8e 01       	movw	r16, r28
     d06:	0f 5f       	subi	r16, 0xFF	; 255
     d08:	1f 4f       	sbci	r17, 0xFF	; 255
     d0a:	1f 93       	push	r17
     d0c:	0f 93       	push	r16
     d0e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <sprintf>
	TransmitString(bufferSTR);
     d12:	c8 01       	movw	r24, r16
     d14:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	2a 96       	adiw	r28, 0x0a	; 10
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <printResult>:
		currentResult.correctNumbes += 1;
	}
}

void printResult()
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
	resetLeds();
     d3c:	0e 94 5f 01 	call	0x2be	; 0x2be <resetLeds>
	//setLeds();
	setLedSetting();
     d40:	0e 94 1c 06 	call	0xc38	; 0xc38 <setLedSetting>
	timer1_Frequency(5);
     d44:	85 e0       	ldi	r24, 0x05	; 5
     d46:	0e 94 24 01 	call	0x248	; 0x248 <timer1_Frequency>
	TransmitString("amout of correct places: ");
     d4a:	8d e7       	ldi	r24, 0x7D	; 125
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
	TransmitByte('0' + currentResult.correctLocations);
     d52:	ce e3       	ldi	r28, 0x3E	; 62
     d54:	d3 e0       	ldi	r29, 0x03	; 3
     d56:	88 81       	ld	r24, Y
     d58:	80 5d       	subi	r24, 0xD0	; 208
     d5a:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
	TransmitString("\r\n");
     d5e:	81 ec       	ldi	r24, 0xC1	; 193
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     d66:	2f ef       	ldi	r18, 0xFF	; 255
     d68:	81 ee       	ldi	r24, 0xE1	; 225
     d6a:	94 e0       	ldi	r25, 0x04	; 4
     d6c:	21 50       	subi	r18, 0x01	; 1
     d6e:	80 40       	sbci	r24, 0x00	; 0
     d70:	90 40       	sbci	r25, 0x00	; 0
     d72:	e1 f7       	brne	.-8      	; 0xd6c <printResult+0x34>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <printResult+0x3e>
     d76:	00 00       	nop
	_delay_ms(100);
	TransmitString("amout of wrong placed correct numbers: ");
     d78:	87 e9       	ldi	r24, 0x97	; 151
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
	TransmitByte('0' + currentResult.correctNumbes);
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	80 5d       	subi	r24, 0xD0	; 208
     d84:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
	TransmitString("\r\n");
     d88:	81 ec       	ldi	r24, 0xC1	; 193
     d8a:	92 e0       	ldi	r25, 0x02	; 2
     d8c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     d90:	2f ef       	ldi	r18, 0xFF	; 255
     d92:	81 ee       	ldi	r24, 0xE1	; 225
     d94:	94 e0       	ldi	r25, 0x04	; 4
     d96:	21 50       	subi	r18, 0x01	; 1
     d98:	80 40       	sbci	r24, 0x00	; 0
     d9a:	90 40       	sbci	r25, 0x00	; 0
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <printResult+0x5e>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <printResult+0x68>
     da0:	00 00       	nop
	_delay_ms(100);
	turns --;
     da2:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <turns>
     da6:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <turns+0x1>
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <turns+0x1>
     db0:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <turns>
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <printInfo>:
	}
}

void printInfo()
{
	TransmitString(codeInput);
     dba:	88 ed       	ldi	r24, 0xD8	; 216
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
	TransmitString("\r\n");
     dc2:	81 ec       	ldi	r24, 0xC1	; 193
     dc4:	92 e0       	ldi	r25, 0x02	; 2
     dc6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
	//ReceiveByte();
	checkCode();
     dca:	0e 94 76 02 	call	0x4ec	; 0x4ec <checkCode>
	printResult();
     dce:	0e 94 9c 06 	call	0xd38	; 0xd38 <printResult>
	checkTurn();
     dd2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <checkTurn>
	TransmitString("\r\n\r\n");
     dd6:	8f eb       	ldi	r24, 0xBF	; 191
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	0e 94 9d 07 	call	0xf3a	; 0xf3a <TransmitString>
     dde:	08 95       	ret

00000de0 <__vector_19>:
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	ef 93       	push	r30
     df0:	ff 93       	push	r31
     df2:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <UART_TxHead>
     df6:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <UART_TxTail>
     dfa:	98 17       	cp	r25, r24
     dfc:	69 f0       	breq	.+26     	; 0xe18 <__vector_19+0x38>
     dfe:	e0 91 d2 02 	lds	r30, 0x02D2	; 0x8002d2 <UART_TxTail>
     e02:	ef 5f       	subi	r30, 0xFF	; 255
     e04:	ef 71       	andi	r30, 0x1F	; 31
     e06:	e0 93 d2 02 	sts	0x02D2, r30	; 0x8002d2 <UART_TxTail>
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	ec 52       	subi	r30, 0x2C	; 44
     e0e:	fd 4f       	sbci	r31, 0xFD	; 253
     e10:	80 81       	ld	r24, Z
     e12:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <__vector_19+0x42>
     e18:	e1 ec       	ldi	r30, 0xC1	; 193
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8f 7d       	andi	r24, 0xDF	; 223
     e20:	80 83       	st	Z, r24
     e22:	ff 91       	pop	r31
     e24:	ef 91       	pop	r30
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__vector_18>:
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
     e46:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     e4a:	e0 91 f5 02 	lds	r30, 0x02F5	; 0x8002f5 <UART_RxHead>
     e4e:	ef 5f       	subi	r30, 0xFF	; 255
     e50:	ef 71       	andi	r30, 0x1F	; 31
     e52:	e0 93 f5 02 	sts	0x02F5, r30	; 0x8002f5 <UART_RxHead>
     e56:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <UART_RxTail>
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	ea 50       	subi	r30, 0x0A	; 10
     e5e:	fd 4f       	sbci	r31, 0xFD	; 253
     e60:	80 83       	st	Z, r24
     e62:	ff 91       	pop	r31
     e64:	ef 91       	pop	r30
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	0f 90       	pop	r0
     e70:	1f 90       	pop	r1
     e72:	18 95       	reti

00000e74 <InitUART>:
     e74:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     e78:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     e7c:	88 e9       	ldi	r24, 0x98	; 152
     e7e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     e82:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <UART_RxTail>
     e86:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <UART_RxHead>
     e8a:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <UART_TxTail>
     e8e:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <UART_TxHead>
     e92:	08 95       	ret

00000e94 <ReceiveByte>:
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <ReceiveByte+0xe>
     e96:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <reset>
     e9a:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <reset+0x1>
     e9e:	89 2b       	or	r24, r25
     ea0:	31 f4       	brne	.+12     	; 0xeae <ReceiveByte+0x1a>
     ea2:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <UART_RxHead>
     ea6:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <UART_RxTail>
     eaa:	98 17       	cp	r25, r24
     eac:	a1 f3       	breq	.-24     	; 0xe96 <ReceiveByte+0x2>
     eae:	e0 91 f4 02 	lds	r30, 0x02F4	; 0x8002f4 <UART_RxTail>
     eb2:	ef 5f       	subi	r30, 0xFF	; 255
     eb4:	ef 71       	andi	r30, 0x1F	; 31
     eb6:	e0 93 f4 02 	sts	0x02F4, r30	; 0x8002f4 <UART_RxTail>
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	ea 50       	subi	r30, 0x0A	; 10
     ebe:	fd 4f       	sbci	r31, 0xFD	; 253
     ec0:	80 81       	ld	r24, Z
     ec2:	08 95       	ret

00000ec4 <TransmitByte>:
     ec4:	20 91 d3 02 	lds	r18, 0x02D3	; 0x8002d3 <UART_TxHead>
     ec8:	2f 5f       	subi	r18, 0xFF	; 255
     eca:	2f 71       	andi	r18, 0x1F	; 31
     ecc:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <UART_TxTail>
     ed0:	29 17       	cp	r18, r25
     ed2:	e1 f3       	breq	.-8      	; 0xecc <TransmitByte+0x8>
     ed4:	e2 2f       	mov	r30, r18
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	ec 52       	subi	r30, 0x2C	; 44
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	80 83       	st	Z, r24
     ede:	20 93 d3 02 	sts	0x02D3, r18	; 0x8002d3 <UART_TxHead>
     ee2:	e1 ec       	ldi	r30, 0xC1	; 193
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 62       	ori	r24, 0x20	; 32
     eea:	80 83       	st	Z, r24
     eec:	08 95       	ret

00000eee <ReceiveString>:
     eee:	ef 92       	push	r14
     ef0:	ff 92       	push	r15
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	7c 01       	movw	r14, r24
     efa:	c0 e0       	ldi	r28, 0x00	; 0
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <ReceiveString+0x1e>
     efe:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <reset>
     f02:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <reset+0x1>
     f06:	89 2b       	or	r24, r25
     f08:	51 f4       	brne	.+20     	; 0xf1e <ReceiveString+0x30>
     f0a:	cf 5f       	subi	r28, 0xFF	; 255
     f0c:	87 01       	movw	r16, r14
     f0e:	0c 0f       	add	r16, r28
     f10:	11 1d       	adc	r17, r1
     f12:	0e 94 4a 07 	call	0xe94	; 0xe94 <ReceiveByte>
     f16:	f8 01       	movw	r30, r16
     f18:	80 83       	st	Z, r24
     f1a:	8a 30       	cpi	r24, 0x0A	; 10
     f1c:	81 f7       	brne	.-32     	; 0xefe <ReceiveString+0x10>
     f1e:	8a e0       	ldi	r24, 0x0A	; 10
     f20:	f8 01       	movw	r30, r16
     f22:	80 83       	st	Z, r24
     f24:	cf 5f       	subi	r28, 0xFF	; 255
     f26:	f7 01       	movw	r30, r14
     f28:	ec 0f       	add	r30, r28
     f2a:	f1 1d       	adc	r31, r1
     f2c:	10 82       	st	Z, r1
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	08 95       	ret

00000f3a <TransmitString>:
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	ec 01       	movw	r28, r24
     f40:	88 81       	ld	r24, Y
     f42:	88 23       	and	r24, r24
     f44:	31 f0       	breq	.+12     	; 0xf52 <TransmitString+0x18>
     f46:	21 96       	adiw	r28, 0x01	; 1
     f48:	0e 94 62 07 	call	0xec4	; 0xec4 <TransmitByte>
     f4c:	89 91       	ld	r24, Y+
     f4e:	81 11       	cpse	r24, r1
     f50:	fb cf       	rjmp	.-10     	; 0xf48 <TransmitString+0xe>
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	08 95       	ret

00000f58 <resetUart1>:
     f58:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <UART_RxTail>
     f5c:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <UART_RxHead>
     f60:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <UART_TxTail>
     f64:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <UART_TxHead>
     f68:	08 95       	ret

00000f6a <__divmodhi4>:
     f6a:	97 fb       	bst	r25, 7
     f6c:	07 2e       	mov	r0, r23
     f6e:	16 f4       	brtc	.+4      	; 0xf74 <__divmodhi4+0xa>
     f70:	00 94       	com	r0
     f72:	07 d0       	rcall	.+14     	; 0xf82 <__divmodhi4_neg1>
     f74:	77 fd       	sbrc	r23, 7
     f76:	09 d0       	rcall	.+18     	; 0xf8a <__divmodhi4_neg2>
     f78:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__udivmodhi4>
     f7c:	07 fc       	sbrc	r0, 7
     f7e:	05 d0       	rcall	.+10     	; 0xf8a <__divmodhi4_neg2>
     f80:	3e f4       	brtc	.+14     	; 0xf90 <__divmodhi4_exit>

00000f82 <__divmodhi4_neg1>:
     f82:	90 95       	com	r25
     f84:	81 95       	neg	r24
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	08 95       	ret

00000f8a <__divmodhi4_neg2>:
     f8a:	70 95       	com	r23
     f8c:	61 95       	neg	r22
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255

00000f90 <__divmodhi4_exit>:
     f90:	08 95       	ret

00000f92 <__udivmodsi4>:
     f92:	a1 e2       	ldi	r26, 0x21	; 33
     f94:	1a 2e       	mov	r1, r26
     f96:	aa 1b       	sub	r26, r26
     f98:	bb 1b       	sub	r27, r27
     f9a:	fd 01       	movw	r30, r26
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <__udivmodsi4_ep>

00000f9e <__udivmodsi4_loop>:
     f9e:	aa 1f       	adc	r26, r26
     fa0:	bb 1f       	adc	r27, r27
     fa2:	ee 1f       	adc	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	a2 17       	cp	r26, r18
     fa8:	b3 07       	cpc	r27, r19
     faa:	e4 07       	cpc	r30, r20
     fac:	f5 07       	cpc	r31, r21
     fae:	20 f0       	brcs	.+8      	; 0xfb8 <__udivmodsi4_ep>
     fb0:	a2 1b       	sub	r26, r18
     fb2:	b3 0b       	sbc	r27, r19
     fb4:	e4 0b       	sbc	r30, r20
     fb6:	f5 0b       	sbc	r31, r21

00000fb8 <__udivmodsi4_ep>:
     fb8:	66 1f       	adc	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	1a 94       	dec	r1
     fc2:	69 f7       	brne	.-38     	; 0xf9e <__udivmodsi4_loop>
     fc4:	60 95       	com	r22
     fc6:	70 95       	com	r23
     fc8:	80 95       	com	r24
     fca:	90 95       	com	r25
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
     fd0:	bd 01       	movw	r22, r26
     fd2:	cf 01       	movw	r24, r30
     fd4:	08 95       	ret

00000fd6 <__udivmodhi4>:
     fd6:	aa 1b       	sub	r26, r26
     fd8:	bb 1b       	sub	r27, r27
     fda:	51 e1       	ldi	r21, 0x11	; 17
     fdc:	07 c0       	rjmp	.+14     	; 0xfec <__udivmodhi4_ep>

00000fde <__udivmodhi4_loop>:
     fde:	aa 1f       	adc	r26, r26
     fe0:	bb 1f       	adc	r27, r27
     fe2:	a6 17       	cp	r26, r22
     fe4:	b7 07       	cpc	r27, r23
     fe6:	10 f0       	brcs	.+4      	; 0xfec <__udivmodhi4_ep>
     fe8:	a6 1b       	sub	r26, r22
     fea:	b7 0b       	sbc	r27, r23

00000fec <__udivmodhi4_ep>:
     fec:	88 1f       	adc	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	5a 95       	dec	r21
     ff2:	a9 f7       	brne	.-22     	; 0xfde <__udivmodhi4_loop>
     ff4:	80 95       	com	r24
     ff6:	90 95       	com	r25
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	08 95       	ret

00000ffe <do_rand>:
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	ec 01       	movw	r28, r24
    1014:	68 81       	ld	r22, Y
    1016:	79 81       	ldd	r23, Y+1	; 0x01
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	9b 81       	ldd	r25, Y+3	; 0x03
    101c:	61 15       	cp	r22, r1
    101e:	71 05       	cpc	r23, r1
    1020:	81 05       	cpc	r24, r1
    1022:	91 05       	cpc	r25, r1
    1024:	21 f4       	brne	.+8      	; 0x102e <do_rand+0x30>
    1026:	64 e2       	ldi	r22, 0x24	; 36
    1028:	79 ed       	ldi	r23, 0xD9	; 217
    102a:	8b e5       	ldi	r24, 0x5B	; 91
    102c:	97 e0       	ldi	r25, 0x07	; 7
    102e:	2d e1       	ldi	r18, 0x1D	; 29
    1030:	33 ef       	ldi	r19, 0xF3	; 243
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	0e 94 0e 0b 	call	0x161c	; 0x161c <__divmodsi4>
    103a:	49 01       	movw	r8, r18
    103c:	5a 01       	movw	r10, r20
    103e:	9b 01       	movw	r18, r22
    1040:	ac 01       	movw	r20, r24
    1042:	a7 ea       	ldi	r26, 0xA7	; 167
    1044:	b1 e4       	ldi	r27, 0x41	; 65
    1046:	0e 94 2d 0b 	call	0x165a	; 0x165a <__muluhisi3>
    104a:	6b 01       	movw	r12, r22
    104c:	7c 01       	movw	r14, r24
    104e:	ac ee       	ldi	r26, 0xEC	; 236
    1050:	b4 ef       	ldi	r27, 0xF4	; 244
    1052:	a5 01       	movw	r20, r10
    1054:	94 01       	movw	r18, r8
    1056:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulohisi3>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	8c 0d       	add	r24, r12
    1060:	9d 1d       	adc	r25, r13
    1062:	ae 1d       	adc	r26, r14
    1064:	bf 1d       	adc	r27, r15
    1066:	b7 ff       	sbrs	r27, 7
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <do_rand+0x72>
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	a1 09       	sbc	r26, r1
    106e:	b0 48       	sbci	r27, 0x80	; 128
    1070:	88 83       	st	Y, r24
    1072:	99 83       	std	Y+1, r25	; 0x01
    1074:	aa 83       	std	Y+2, r26	; 0x02
    1076:	bb 83       	std	Y+3, r27	; 0x03
    1078:	9f 77       	andi	r25, 0x7F	; 127
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	af 90       	pop	r10
    108a:	9f 90       	pop	r9
    108c:	8f 90       	pop	r8
    108e:	08 95       	ret

00001090 <rand_r>:
    1090:	0e 94 ff 07 	call	0xffe	; 0xffe <do_rand>
    1094:	08 95       	ret

00001096 <rand>:
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	0e 94 ff 07 	call	0xffe	; 0xffe <do_rand>
    109e:	08 95       	ret

000010a0 <srand>:
    10a0:	a0 e0       	ldi	r26, 0x00	; 0
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    10a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    10ac:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    10b0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    10b4:	08 95       	ret

000010b6 <sprintf>:
    10b6:	ae e0       	ldi	r26, 0x0E	; 14
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e1 e6       	ldi	r30, 0x61	; 97
    10bc:	f8 e0       	ldi	r31, 0x08	; 8
    10be:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__prologue_saves__+0x1c>
    10c2:	0d 89       	ldd	r16, Y+21	; 0x15
    10c4:	1e 89       	ldd	r17, Y+22	; 0x16
    10c6:	86 e0       	ldi	r24, 0x06	; 6
    10c8:	8c 83       	std	Y+4, r24	; 0x04
    10ca:	1a 83       	std	Y+2, r17	; 0x02
    10cc:	09 83       	std	Y+1, r16	; 0x01
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	9f e7       	ldi	r25, 0x7F	; 127
    10d2:	9e 83       	std	Y+6, r25	; 0x06
    10d4:	8d 83       	std	Y+5, r24	; 0x05
    10d6:	ae 01       	movw	r20, r28
    10d8:	47 5e       	subi	r20, 0xE7	; 231
    10da:	5f 4f       	sbci	r21, 0xFF	; 255
    10dc:	6f 89       	ldd	r22, Y+23	; 0x17
    10de:	78 8d       	ldd	r23, Y+24	; 0x18
    10e0:	ce 01       	movw	r24, r28
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <vfprintf>
    10e8:	ef 81       	ldd	r30, Y+7	; 0x07
    10ea:	f8 85       	ldd	r31, Y+8	; 0x08
    10ec:	e0 0f       	add	r30, r16
    10ee:	f1 1f       	adc	r31, r17
    10f0:	10 82       	st	Z, r1
    10f2:	2e 96       	adiw	r28, 0x0e	; 14
    10f4:	e4 e0       	ldi	r30, 0x04	; 4
    10f6:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__epilogue_restores__+0x1c>

000010fa <vfprintf>:
    10fa:	ab e0       	ldi	r26, 0x0B	; 11
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e8       	ldi	r30, 0x83	; 131
    1100:	f8 e0       	ldi	r31, 0x08	; 8
    1102:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <__prologue_saves__>
    1106:	6c 01       	movw	r12, r24
    1108:	7b 01       	movw	r14, r22
    110a:	8a 01       	movw	r16, r20
    110c:	fc 01       	movw	r30, r24
    110e:	17 82       	std	Z+7, r1	; 0x07
    1110:	16 82       	std	Z+6, r1	; 0x06
    1112:	83 81       	ldd	r24, Z+3	; 0x03
    1114:	81 ff       	sbrs	r24, 1
    1116:	cc c1       	rjmp	.+920    	; 0x14b0 <vfprintf+0x3b6>
    1118:	ce 01       	movw	r24, r28
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	3c 01       	movw	r6, r24
    111e:	f6 01       	movw	r30, r12
    1120:	93 81       	ldd	r25, Z+3	; 0x03
    1122:	f7 01       	movw	r30, r14
    1124:	93 fd       	sbrc	r25, 3
    1126:	85 91       	lpm	r24, Z+
    1128:	93 ff       	sbrs	r25, 3
    112a:	81 91       	ld	r24, Z+
    112c:	7f 01       	movw	r14, r30
    112e:	88 23       	and	r24, r24
    1130:	09 f4       	brne	.+2      	; 0x1134 <vfprintf+0x3a>
    1132:	ba c1       	rjmp	.+884    	; 0x14a8 <vfprintf+0x3ae>
    1134:	85 32       	cpi	r24, 0x25	; 37
    1136:	39 f4       	brne	.+14     	; 0x1146 <vfprintf+0x4c>
    1138:	93 fd       	sbrc	r25, 3
    113a:	85 91       	lpm	r24, Z+
    113c:	93 ff       	sbrs	r25, 3
    113e:	81 91       	ld	r24, Z+
    1140:	7f 01       	movw	r14, r30
    1142:	85 32       	cpi	r24, 0x25	; 37
    1144:	29 f4       	brne	.+10     	; 0x1150 <vfprintf+0x56>
    1146:	b6 01       	movw	r22, r12
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <fputc>
    114e:	e7 cf       	rjmp	.-50     	; 0x111e <vfprintf+0x24>
    1150:	91 2c       	mov	r9, r1
    1152:	21 2c       	mov	r2, r1
    1154:	31 2c       	mov	r3, r1
    1156:	ff e1       	ldi	r31, 0x1F	; 31
    1158:	f3 15       	cp	r31, r3
    115a:	d8 f0       	brcs	.+54     	; 0x1192 <vfprintf+0x98>
    115c:	8b 32       	cpi	r24, 0x2B	; 43
    115e:	79 f0       	breq	.+30     	; 0x117e <vfprintf+0x84>
    1160:	38 f4       	brcc	.+14     	; 0x1170 <vfprintf+0x76>
    1162:	80 32       	cpi	r24, 0x20	; 32
    1164:	79 f0       	breq	.+30     	; 0x1184 <vfprintf+0x8a>
    1166:	83 32       	cpi	r24, 0x23	; 35
    1168:	a1 f4       	brne	.+40     	; 0x1192 <vfprintf+0x98>
    116a:	23 2d       	mov	r18, r3
    116c:	20 61       	ori	r18, 0x10	; 16
    116e:	1d c0       	rjmp	.+58     	; 0x11aa <vfprintf+0xb0>
    1170:	8d 32       	cpi	r24, 0x2D	; 45
    1172:	61 f0       	breq	.+24     	; 0x118c <vfprintf+0x92>
    1174:	80 33       	cpi	r24, 0x30	; 48
    1176:	69 f4       	brne	.+26     	; 0x1192 <vfprintf+0x98>
    1178:	23 2d       	mov	r18, r3
    117a:	21 60       	ori	r18, 0x01	; 1
    117c:	16 c0       	rjmp	.+44     	; 0x11aa <vfprintf+0xb0>
    117e:	83 2d       	mov	r24, r3
    1180:	82 60       	ori	r24, 0x02	; 2
    1182:	38 2e       	mov	r3, r24
    1184:	e3 2d       	mov	r30, r3
    1186:	e4 60       	ori	r30, 0x04	; 4
    1188:	3e 2e       	mov	r3, r30
    118a:	2a c0       	rjmp	.+84     	; 0x11e0 <vfprintf+0xe6>
    118c:	f3 2d       	mov	r31, r3
    118e:	f8 60       	ori	r31, 0x08	; 8
    1190:	1d c0       	rjmp	.+58     	; 0x11cc <vfprintf+0xd2>
    1192:	37 fc       	sbrc	r3, 7
    1194:	2d c0       	rjmp	.+90     	; 0x11f0 <vfprintf+0xf6>
    1196:	20 ed       	ldi	r18, 0xD0	; 208
    1198:	28 0f       	add	r18, r24
    119a:	2a 30       	cpi	r18, 0x0A	; 10
    119c:	40 f0       	brcs	.+16     	; 0x11ae <vfprintf+0xb4>
    119e:	8e 32       	cpi	r24, 0x2E	; 46
    11a0:	b9 f4       	brne	.+46     	; 0x11d0 <vfprintf+0xd6>
    11a2:	36 fc       	sbrc	r3, 6
    11a4:	81 c1       	rjmp	.+770    	; 0x14a8 <vfprintf+0x3ae>
    11a6:	23 2d       	mov	r18, r3
    11a8:	20 64       	ori	r18, 0x40	; 64
    11aa:	32 2e       	mov	r3, r18
    11ac:	19 c0       	rjmp	.+50     	; 0x11e0 <vfprintf+0xe6>
    11ae:	36 fe       	sbrs	r3, 6
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <vfprintf+0xc4>
    11b2:	8a e0       	ldi	r24, 0x0A	; 10
    11b4:	98 9e       	mul	r9, r24
    11b6:	20 0d       	add	r18, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	92 2e       	mov	r9, r18
    11bc:	11 c0       	rjmp	.+34     	; 0x11e0 <vfprintf+0xe6>
    11be:	ea e0       	ldi	r30, 0x0A	; 10
    11c0:	2e 9e       	mul	r2, r30
    11c2:	20 0d       	add	r18, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	22 2e       	mov	r2, r18
    11c8:	f3 2d       	mov	r31, r3
    11ca:	f0 62       	ori	r31, 0x20	; 32
    11cc:	3f 2e       	mov	r3, r31
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <vfprintf+0xe6>
    11d0:	8c 36       	cpi	r24, 0x6C	; 108
    11d2:	21 f4       	brne	.+8      	; 0x11dc <vfprintf+0xe2>
    11d4:	83 2d       	mov	r24, r3
    11d6:	80 68       	ori	r24, 0x80	; 128
    11d8:	38 2e       	mov	r3, r24
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0xe6>
    11dc:	88 36       	cpi	r24, 0x68	; 104
    11de:	41 f4       	brne	.+16     	; 0x11f0 <vfprintf+0xf6>
    11e0:	f7 01       	movw	r30, r14
    11e2:	93 fd       	sbrc	r25, 3
    11e4:	85 91       	lpm	r24, Z+
    11e6:	93 ff       	sbrs	r25, 3
    11e8:	81 91       	ld	r24, Z+
    11ea:	7f 01       	movw	r14, r30
    11ec:	81 11       	cpse	r24, r1
    11ee:	b3 cf       	rjmp	.-154    	; 0x1156 <vfprintf+0x5c>
    11f0:	98 2f       	mov	r25, r24
    11f2:	9f 7d       	andi	r25, 0xDF	; 223
    11f4:	95 54       	subi	r25, 0x45	; 69
    11f6:	93 30       	cpi	r25, 0x03	; 3
    11f8:	28 f4       	brcc	.+10     	; 0x1204 <vfprintf+0x10a>
    11fa:	0c 5f       	subi	r16, 0xFC	; 252
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	9f e3       	ldi	r25, 0x3F	; 63
    1200:	99 83       	std	Y+1, r25	; 0x01
    1202:	0d c0       	rjmp	.+26     	; 0x121e <vfprintf+0x124>
    1204:	83 36       	cpi	r24, 0x63	; 99
    1206:	31 f0       	breq	.+12     	; 0x1214 <vfprintf+0x11a>
    1208:	83 37       	cpi	r24, 0x73	; 115
    120a:	71 f0       	breq	.+28     	; 0x1228 <vfprintf+0x12e>
    120c:	83 35       	cpi	r24, 0x53	; 83
    120e:	09 f0       	breq	.+2      	; 0x1212 <vfprintf+0x118>
    1210:	59 c0       	rjmp	.+178    	; 0x12c4 <vfprintf+0x1ca>
    1212:	21 c0       	rjmp	.+66     	; 0x1256 <vfprintf+0x15c>
    1214:	f8 01       	movw	r30, r16
    1216:	80 81       	ld	r24, Z
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	0e 5f       	subi	r16, 0xFE	; 254
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	88 24       	eor	r8, r8
    1220:	83 94       	inc	r8
    1222:	91 2c       	mov	r9, r1
    1224:	53 01       	movw	r10, r6
    1226:	13 c0       	rjmp	.+38     	; 0x124e <vfprintf+0x154>
    1228:	28 01       	movw	r4, r16
    122a:	f2 e0       	ldi	r31, 0x02	; 2
    122c:	4f 0e       	add	r4, r31
    122e:	51 1c       	adc	r5, r1
    1230:	f8 01       	movw	r30, r16
    1232:	a0 80       	ld	r10, Z
    1234:	b1 80       	ldd	r11, Z+1	; 0x01
    1236:	36 fe       	sbrs	r3, 6
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <vfprintf+0x146>
    123a:	69 2d       	mov	r22, r9
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <vfprintf+0x14a>
    1240:	6f ef       	ldi	r22, 0xFF	; 255
    1242:	7f ef       	ldi	r23, 0xFF	; 255
    1244:	c5 01       	movw	r24, r10
    1246:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <strnlen>
    124a:	4c 01       	movw	r8, r24
    124c:	82 01       	movw	r16, r4
    124e:	f3 2d       	mov	r31, r3
    1250:	ff 77       	andi	r31, 0x7F	; 127
    1252:	3f 2e       	mov	r3, r31
    1254:	16 c0       	rjmp	.+44     	; 0x1282 <vfprintf+0x188>
    1256:	28 01       	movw	r4, r16
    1258:	22 e0       	ldi	r18, 0x02	; 2
    125a:	42 0e       	add	r4, r18
    125c:	51 1c       	adc	r5, r1
    125e:	f8 01       	movw	r30, r16
    1260:	a0 80       	ld	r10, Z
    1262:	b1 80       	ldd	r11, Z+1	; 0x01
    1264:	36 fe       	sbrs	r3, 6
    1266:	03 c0       	rjmp	.+6      	; 0x126e <vfprintf+0x174>
    1268:	69 2d       	mov	r22, r9
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x178>
    126e:	6f ef       	ldi	r22, 0xFF	; 255
    1270:	7f ef       	ldi	r23, 0xFF	; 255
    1272:	c5 01       	movw	r24, r10
    1274:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <strnlen_P>
    1278:	4c 01       	movw	r8, r24
    127a:	f3 2d       	mov	r31, r3
    127c:	f0 68       	ori	r31, 0x80	; 128
    127e:	3f 2e       	mov	r3, r31
    1280:	82 01       	movw	r16, r4
    1282:	33 fc       	sbrc	r3, 3
    1284:	1b c0       	rjmp	.+54     	; 0x12bc <vfprintf+0x1c2>
    1286:	82 2d       	mov	r24, r2
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	88 16       	cp	r8, r24
    128c:	99 06       	cpc	r9, r25
    128e:	b0 f4       	brcc	.+44     	; 0x12bc <vfprintf+0x1c2>
    1290:	b6 01       	movw	r22, r12
    1292:	80 e2       	ldi	r24, 0x20	; 32
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <fputc>
    129a:	2a 94       	dec	r2
    129c:	f4 cf       	rjmp	.-24     	; 0x1286 <vfprintf+0x18c>
    129e:	f5 01       	movw	r30, r10
    12a0:	37 fc       	sbrc	r3, 7
    12a2:	85 91       	lpm	r24, Z+
    12a4:	37 fe       	sbrs	r3, 7
    12a6:	81 91       	ld	r24, Z+
    12a8:	5f 01       	movw	r10, r30
    12aa:	b6 01       	movw	r22, r12
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <fputc>
    12b2:	21 10       	cpse	r2, r1
    12b4:	2a 94       	dec	r2
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	82 1a       	sub	r8, r18
    12ba:	91 08       	sbc	r9, r1
    12bc:	81 14       	cp	r8, r1
    12be:	91 04       	cpc	r9, r1
    12c0:	71 f7       	brne	.-36     	; 0x129e <vfprintf+0x1a4>
    12c2:	e8 c0       	rjmp	.+464    	; 0x1494 <vfprintf+0x39a>
    12c4:	84 36       	cpi	r24, 0x64	; 100
    12c6:	11 f0       	breq	.+4      	; 0x12cc <vfprintf+0x1d2>
    12c8:	89 36       	cpi	r24, 0x69	; 105
    12ca:	41 f5       	brne	.+80     	; 0x131c <vfprintf+0x222>
    12cc:	f8 01       	movw	r30, r16
    12ce:	37 fe       	sbrs	r3, 7
    12d0:	07 c0       	rjmp	.+14     	; 0x12e0 <vfprintf+0x1e6>
    12d2:	60 81       	ld	r22, Z
    12d4:	71 81       	ldd	r23, Z+1	; 0x01
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
    12d8:	93 81       	ldd	r25, Z+3	; 0x03
    12da:	0c 5f       	subi	r16, 0xFC	; 252
    12dc:	1f 4f       	sbci	r17, 0xFF	; 255
    12de:	08 c0       	rjmp	.+16     	; 0x12f0 <vfprintf+0x1f6>
    12e0:	60 81       	ld	r22, Z
    12e2:	71 81       	ldd	r23, Z+1	; 0x01
    12e4:	07 2e       	mov	r0, r23
    12e6:	00 0c       	add	r0, r0
    12e8:	88 0b       	sbc	r24, r24
    12ea:	99 0b       	sbc	r25, r25
    12ec:	0e 5f       	subi	r16, 0xFE	; 254
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	f3 2d       	mov	r31, r3
    12f2:	ff 76       	andi	r31, 0x6F	; 111
    12f4:	3f 2e       	mov	r3, r31
    12f6:	97 ff       	sbrs	r25, 7
    12f8:	09 c0       	rjmp	.+18     	; 0x130c <vfprintf+0x212>
    12fa:	90 95       	com	r25
    12fc:	80 95       	com	r24
    12fe:	70 95       	com	r23
    1300:	61 95       	neg	r22
    1302:	7f 4f       	sbci	r23, 0xFF	; 255
    1304:	8f 4f       	sbci	r24, 0xFF	; 255
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	f0 68       	ori	r31, 0x80	; 128
    130a:	3f 2e       	mov	r3, r31
    130c:	2a e0       	ldi	r18, 0x0A	; 10
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	a3 01       	movw	r20, r6
    1312:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__ultoa_invert>
    1316:	88 2e       	mov	r8, r24
    1318:	86 18       	sub	r8, r6
    131a:	45 c0       	rjmp	.+138    	; 0x13a6 <vfprintf+0x2ac>
    131c:	85 37       	cpi	r24, 0x75	; 117
    131e:	31 f4       	brne	.+12     	; 0x132c <vfprintf+0x232>
    1320:	23 2d       	mov	r18, r3
    1322:	2f 7e       	andi	r18, 0xEF	; 239
    1324:	b2 2e       	mov	r11, r18
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	25 c0       	rjmp	.+74     	; 0x1376 <vfprintf+0x27c>
    132c:	93 2d       	mov	r25, r3
    132e:	99 7f       	andi	r25, 0xF9	; 249
    1330:	b9 2e       	mov	r11, r25
    1332:	8f 36       	cpi	r24, 0x6F	; 111
    1334:	c1 f0       	breq	.+48     	; 0x1366 <vfprintf+0x26c>
    1336:	18 f4       	brcc	.+6      	; 0x133e <vfprintf+0x244>
    1338:	88 35       	cpi	r24, 0x58	; 88
    133a:	79 f0       	breq	.+30     	; 0x135a <vfprintf+0x260>
    133c:	b5 c0       	rjmp	.+362    	; 0x14a8 <vfprintf+0x3ae>
    133e:	80 37       	cpi	r24, 0x70	; 112
    1340:	19 f0       	breq	.+6      	; 0x1348 <vfprintf+0x24e>
    1342:	88 37       	cpi	r24, 0x78	; 120
    1344:	21 f0       	breq	.+8      	; 0x134e <vfprintf+0x254>
    1346:	b0 c0       	rjmp	.+352    	; 0x14a8 <vfprintf+0x3ae>
    1348:	e9 2f       	mov	r30, r25
    134a:	e0 61       	ori	r30, 0x10	; 16
    134c:	be 2e       	mov	r11, r30
    134e:	b4 fe       	sbrs	r11, 4
    1350:	0d c0       	rjmp	.+26     	; 0x136c <vfprintf+0x272>
    1352:	fb 2d       	mov	r31, r11
    1354:	f4 60       	ori	r31, 0x04	; 4
    1356:	bf 2e       	mov	r11, r31
    1358:	09 c0       	rjmp	.+18     	; 0x136c <vfprintf+0x272>
    135a:	34 fe       	sbrs	r3, 4
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <vfprintf+0x278>
    135e:	29 2f       	mov	r18, r25
    1360:	26 60       	ori	r18, 0x06	; 6
    1362:	b2 2e       	mov	r11, r18
    1364:	06 c0       	rjmp	.+12     	; 0x1372 <vfprintf+0x278>
    1366:	28 e0       	ldi	r18, 0x08	; 8
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <vfprintf+0x27c>
    136c:	20 e1       	ldi	r18, 0x10	; 16
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <vfprintf+0x27c>
    1372:	20 e1       	ldi	r18, 0x10	; 16
    1374:	32 e0       	ldi	r19, 0x02	; 2
    1376:	f8 01       	movw	r30, r16
    1378:	b7 fe       	sbrs	r11, 7
    137a:	07 c0       	rjmp	.+14     	; 0x138a <vfprintf+0x290>
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	0c 5f       	subi	r16, 0xFC	; 252
    1386:	1f 4f       	sbci	r17, 0xFF	; 255
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <vfprintf+0x29c>
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 5f       	subi	r16, 0xFE	; 254
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	a3 01       	movw	r20, r6
    1398:	0e 94 b0 0a 	call	0x1560	; 0x1560 <__ultoa_invert>
    139c:	88 2e       	mov	r8, r24
    139e:	86 18       	sub	r8, r6
    13a0:	fb 2d       	mov	r31, r11
    13a2:	ff 77       	andi	r31, 0x7F	; 127
    13a4:	3f 2e       	mov	r3, r31
    13a6:	36 fe       	sbrs	r3, 6
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <vfprintf+0x2ca>
    13aa:	23 2d       	mov	r18, r3
    13ac:	2e 7f       	andi	r18, 0xFE	; 254
    13ae:	a2 2e       	mov	r10, r18
    13b0:	89 14       	cp	r8, r9
    13b2:	58 f4       	brcc	.+22     	; 0x13ca <vfprintf+0x2d0>
    13b4:	34 fe       	sbrs	r3, 4
    13b6:	0b c0       	rjmp	.+22     	; 0x13ce <vfprintf+0x2d4>
    13b8:	32 fc       	sbrc	r3, 2
    13ba:	09 c0       	rjmp	.+18     	; 0x13ce <vfprintf+0x2d4>
    13bc:	83 2d       	mov	r24, r3
    13be:	8e 7e       	andi	r24, 0xEE	; 238
    13c0:	a8 2e       	mov	r10, r24
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <vfprintf+0x2d4>
    13c4:	b8 2c       	mov	r11, r8
    13c6:	a3 2c       	mov	r10, r3
    13c8:	03 c0       	rjmp	.+6      	; 0x13d0 <vfprintf+0x2d6>
    13ca:	b8 2c       	mov	r11, r8
    13cc:	01 c0       	rjmp	.+2      	; 0x13d0 <vfprintf+0x2d6>
    13ce:	b9 2c       	mov	r11, r9
    13d0:	a4 fe       	sbrs	r10, 4
    13d2:	0f c0       	rjmp	.+30     	; 0x13f2 <vfprintf+0x2f8>
    13d4:	fe 01       	movw	r30, r28
    13d6:	e8 0d       	add	r30, r8
    13d8:	f1 1d       	adc	r31, r1
    13da:	80 81       	ld	r24, Z
    13dc:	80 33       	cpi	r24, 0x30	; 48
    13de:	21 f4       	brne	.+8      	; 0x13e8 <vfprintf+0x2ee>
    13e0:	9a 2d       	mov	r25, r10
    13e2:	99 7e       	andi	r25, 0xE9	; 233
    13e4:	a9 2e       	mov	r10, r25
    13e6:	09 c0       	rjmp	.+18     	; 0x13fa <vfprintf+0x300>
    13e8:	a2 fe       	sbrs	r10, 2
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <vfprintf+0x2fe>
    13ec:	b3 94       	inc	r11
    13ee:	b3 94       	inc	r11
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <vfprintf+0x300>
    13f2:	8a 2d       	mov	r24, r10
    13f4:	86 78       	andi	r24, 0x86	; 134
    13f6:	09 f0       	breq	.+2      	; 0x13fa <vfprintf+0x300>
    13f8:	b3 94       	inc	r11
    13fa:	a3 fc       	sbrc	r10, 3
    13fc:	11 c0       	rjmp	.+34     	; 0x1420 <vfprintf+0x326>
    13fe:	a0 fe       	sbrs	r10, 0
    1400:	06 c0       	rjmp	.+12     	; 0x140e <vfprintf+0x314>
    1402:	b2 14       	cp	r11, r2
    1404:	88 f4       	brcc	.+34     	; 0x1428 <vfprintf+0x32e>
    1406:	28 0c       	add	r2, r8
    1408:	92 2c       	mov	r9, r2
    140a:	9b 18       	sub	r9, r11
    140c:	0e c0       	rjmp	.+28     	; 0x142a <vfprintf+0x330>
    140e:	b2 14       	cp	r11, r2
    1410:	60 f4       	brcc	.+24     	; 0x142a <vfprintf+0x330>
    1412:	b6 01       	movw	r22, r12
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <fputc>
    141c:	b3 94       	inc	r11
    141e:	f7 cf       	rjmp	.-18     	; 0x140e <vfprintf+0x314>
    1420:	b2 14       	cp	r11, r2
    1422:	18 f4       	brcc	.+6      	; 0x142a <vfprintf+0x330>
    1424:	2b 18       	sub	r2, r11
    1426:	02 c0       	rjmp	.+4      	; 0x142c <vfprintf+0x332>
    1428:	98 2c       	mov	r9, r8
    142a:	21 2c       	mov	r2, r1
    142c:	a4 fe       	sbrs	r10, 4
    142e:	10 c0       	rjmp	.+32     	; 0x1450 <vfprintf+0x356>
    1430:	b6 01       	movw	r22, r12
    1432:	80 e3       	ldi	r24, 0x30	; 48
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <fputc>
    143a:	a2 fe       	sbrs	r10, 2
    143c:	17 c0       	rjmp	.+46     	; 0x146c <vfprintf+0x372>
    143e:	a1 fc       	sbrc	r10, 1
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <vfprintf+0x34e>
    1442:	88 e7       	ldi	r24, 0x78	; 120
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <vfprintf+0x352>
    1448:	88 e5       	ldi	r24, 0x58	; 88
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	b6 01       	movw	r22, r12
    144e:	0c c0       	rjmp	.+24     	; 0x1468 <vfprintf+0x36e>
    1450:	8a 2d       	mov	r24, r10
    1452:	86 78       	andi	r24, 0x86	; 134
    1454:	59 f0       	breq	.+22     	; 0x146c <vfprintf+0x372>
    1456:	a1 fe       	sbrs	r10, 1
    1458:	02 c0       	rjmp	.+4      	; 0x145e <vfprintf+0x364>
    145a:	8b e2       	ldi	r24, 0x2B	; 43
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <vfprintf+0x366>
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	a7 fc       	sbrc	r10, 7
    1462:	8d e2       	ldi	r24, 0x2D	; 45
    1464:	b6 01       	movw	r22, r12
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <fputc>
    146c:	89 14       	cp	r8, r9
    146e:	38 f4       	brcc	.+14     	; 0x147e <vfprintf+0x384>
    1470:	b6 01       	movw	r22, r12
    1472:	80 e3       	ldi	r24, 0x30	; 48
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <fputc>
    147a:	9a 94       	dec	r9
    147c:	f7 cf       	rjmp	.-18     	; 0x146c <vfprintf+0x372>
    147e:	8a 94       	dec	r8
    1480:	f3 01       	movw	r30, r6
    1482:	e8 0d       	add	r30, r8
    1484:	f1 1d       	adc	r31, r1
    1486:	80 81       	ld	r24, Z
    1488:	b6 01       	movw	r22, r12
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <fputc>
    1490:	81 10       	cpse	r8, r1
    1492:	f5 cf       	rjmp	.-22     	; 0x147e <vfprintf+0x384>
    1494:	22 20       	and	r2, r2
    1496:	09 f4       	brne	.+2      	; 0x149a <vfprintf+0x3a0>
    1498:	42 ce       	rjmp	.-892    	; 0x111e <vfprintf+0x24>
    149a:	b6 01       	movw	r22, r12
    149c:	80 e2       	ldi	r24, 0x20	; 32
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <fputc>
    14a4:	2a 94       	dec	r2
    14a6:	f6 cf       	rjmp	.-20     	; 0x1494 <vfprintf+0x39a>
    14a8:	f6 01       	movw	r30, r12
    14aa:	86 81       	ldd	r24, Z+6	; 0x06
    14ac:	97 81       	ldd	r25, Z+7	; 0x07
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <vfprintf+0x3ba>
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	2b 96       	adiw	r28, 0x0b	; 11
    14b6:	e2 e1       	ldi	r30, 0x12	; 18
    14b8:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__epilogue_restores__>

000014bc <strnlen_P>:
    14bc:	fc 01       	movw	r30, r24
    14be:	05 90       	lpm	r0, Z+
    14c0:	61 50       	subi	r22, 0x01	; 1
    14c2:	70 40       	sbci	r23, 0x00	; 0
    14c4:	01 10       	cpse	r0, r1
    14c6:	d8 f7       	brcc	.-10     	; 0x14be <strnlen_P+0x2>
    14c8:	80 95       	com	r24
    14ca:	90 95       	com	r25
    14cc:	8e 0f       	add	r24, r30
    14ce:	9f 1f       	adc	r25, r31
    14d0:	08 95       	ret

000014d2 <strnlen>:
    14d2:	fc 01       	movw	r30, r24
    14d4:	61 50       	subi	r22, 0x01	; 1
    14d6:	70 40       	sbci	r23, 0x00	; 0
    14d8:	01 90       	ld	r0, Z+
    14da:	01 10       	cpse	r0, r1
    14dc:	d8 f7       	brcc	.-10     	; 0x14d4 <strnlen+0x2>
    14de:	80 95       	com	r24
    14e0:	90 95       	com	r25
    14e2:	8e 0f       	add	r24, r30
    14e4:	9f 1f       	adc	r25, r31
    14e6:	08 95       	ret

000014e8 <fputc>:
    14e8:	0f 93       	push	r16
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	fb 01       	movw	r30, r22
    14f2:	23 81       	ldd	r18, Z+3	; 0x03
    14f4:	21 fd       	sbrc	r18, 1
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <fputc+0x16>
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	9f ef       	ldi	r25, 0xFF	; 255
    14fc:	2c c0       	rjmp	.+88     	; 0x1556 <fputc+0x6e>
    14fe:	22 ff       	sbrs	r18, 2
    1500:	16 c0       	rjmp	.+44     	; 0x152e <fputc+0x46>
    1502:	46 81       	ldd	r20, Z+6	; 0x06
    1504:	57 81       	ldd	r21, Z+7	; 0x07
    1506:	24 81       	ldd	r18, Z+4	; 0x04
    1508:	35 81       	ldd	r19, Z+5	; 0x05
    150a:	42 17       	cp	r20, r18
    150c:	53 07       	cpc	r21, r19
    150e:	44 f4       	brge	.+16     	; 0x1520 <fputc+0x38>
    1510:	a0 81       	ld	r26, Z
    1512:	b1 81       	ldd	r27, Z+1	; 0x01
    1514:	9d 01       	movw	r18, r26
    1516:	2f 5f       	subi	r18, 0xFF	; 255
    1518:	3f 4f       	sbci	r19, 0xFF	; 255
    151a:	31 83       	std	Z+1, r19	; 0x01
    151c:	20 83       	st	Z, r18
    151e:	8c 93       	st	X, r24
    1520:	26 81       	ldd	r18, Z+6	; 0x06
    1522:	37 81       	ldd	r19, Z+7	; 0x07
    1524:	2f 5f       	subi	r18, 0xFF	; 255
    1526:	3f 4f       	sbci	r19, 0xFF	; 255
    1528:	37 83       	std	Z+7, r19	; 0x07
    152a:	26 83       	std	Z+6, r18	; 0x06
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <fputc+0x6e>
    152e:	8b 01       	movw	r16, r22
    1530:	ec 01       	movw	r28, r24
    1532:	fb 01       	movw	r30, r22
    1534:	00 84       	ldd	r0, Z+8	; 0x08
    1536:	f1 85       	ldd	r31, Z+9	; 0x09
    1538:	e0 2d       	mov	r30, r0
    153a:	09 95       	icall
    153c:	89 2b       	or	r24, r25
    153e:	e1 f6       	brne	.-72     	; 0x14f8 <fputc+0x10>
    1540:	d8 01       	movw	r26, r16
    1542:	16 96       	adiw	r26, 0x06	; 6
    1544:	8d 91       	ld	r24, X+
    1546:	9c 91       	ld	r25, X
    1548:	17 97       	sbiw	r26, 0x07	; 7
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	17 96       	adiw	r26, 0x07	; 7
    154e:	9c 93       	st	X, r25
    1550:	8e 93       	st	-X, r24
    1552:	16 97       	sbiw	r26, 0x06	; 6
    1554:	ce 01       	movw	r24, r28
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	08 95       	ret

00001560 <__ultoa_invert>:
    1560:	fa 01       	movw	r30, r20
    1562:	aa 27       	eor	r26, r26
    1564:	28 30       	cpi	r18, 0x08	; 8
    1566:	51 f1       	breq	.+84     	; 0x15bc <__ultoa_invert+0x5c>
    1568:	20 31       	cpi	r18, 0x10	; 16
    156a:	81 f1       	breq	.+96     	; 0x15cc <__ultoa_invert+0x6c>
    156c:	e8 94       	clt
    156e:	6f 93       	push	r22
    1570:	6e 7f       	andi	r22, 0xFE	; 254
    1572:	6e 5f       	subi	r22, 0xFE	; 254
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	8f 4f       	sbci	r24, 0xFF	; 255
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	af 4f       	sbci	r26, 0xFF	; 255
    157c:	b1 e0       	ldi	r27, 0x01	; 1
    157e:	3e d0       	rcall	.+124    	; 0x15fc <__ultoa_invert+0x9c>
    1580:	b4 e0       	ldi	r27, 0x04	; 4
    1582:	3c d0       	rcall	.+120    	; 0x15fc <__ultoa_invert+0x9c>
    1584:	67 0f       	add	r22, r23
    1586:	78 1f       	adc	r23, r24
    1588:	89 1f       	adc	r24, r25
    158a:	9a 1f       	adc	r25, r26
    158c:	a1 1d       	adc	r26, r1
    158e:	68 0f       	add	r22, r24
    1590:	79 1f       	adc	r23, r25
    1592:	8a 1f       	adc	r24, r26
    1594:	91 1d       	adc	r25, r1
    1596:	a1 1d       	adc	r26, r1
    1598:	6a 0f       	add	r22, r26
    159a:	71 1d       	adc	r23, r1
    159c:	81 1d       	adc	r24, r1
    159e:	91 1d       	adc	r25, r1
    15a0:	a1 1d       	adc	r26, r1
    15a2:	20 d0       	rcall	.+64     	; 0x15e4 <__ultoa_invert+0x84>
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <__ultoa_invert+0x48>
    15a6:	68 94       	set
    15a8:	3f 91       	pop	r19
    15aa:	2a e0       	ldi	r18, 0x0A	; 10
    15ac:	26 9f       	mul	r18, r22
    15ae:	11 24       	eor	r1, r1
    15b0:	30 19       	sub	r19, r0
    15b2:	30 5d       	subi	r19, 0xD0	; 208
    15b4:	31 93       	st	Z+, r19
    15b6:	de f6       	brtc	.-74     	; 0x156e <__ultoa_invert+0xe>
    15b8:	cf 01       	movw	r24, r30
    15ba:	08 95       	ret
    15bc:	46 2f       	mov	r20, r22
    15be:	47 70       	andi	r20, 0x07	; 7
    15c0:	40 5d       	subi	r20, 0xD0	; 208
    15c2:	41 93       	st	Z+, r20
    15c4:	b3 e0       	ldi	r27, 0x03	; 3
    15c6:	0f d0       	rcall	.+30     	; 0x15e6 <__ultoa_invert+0x86>
    15c8:	c9 f7       	brne	.-14     	; 0x15bc <__ultoa_invert+0x5c>
    15ca:	f6 cf       	rjmp	.-20     	; 0x15b8 <__ultoa_invert+0x58>
    15cc:	46 2f       	mov	r20, r22
    15ce:	4f 70       	andi	r20, 0x0F	; 15
    15d0:	40 5d       	subi	r20, 0xD0	; 208
    15d2:	4a 33       	cpi	r20, 0x3A	; 58
    15d4:	18 f0       	brcs	.+6      	; 0x15dc <__ultoa_invert+0x7c>
    15d6:	49 5d       	subi	r20, 0xD9	; 217
    15d8:	31 fd       	sbrc	r19, 1
    15da:	40 52       	subi	r20, 0x20	; 32
    15dc:	41 93       	st	Z+, r20
    15de:	02 d0       	rcall	.+4      	; 0x15e4 <__ultoa_invert+0x84>
    15e0:	a9 f7       	brne	.-22     	; 0x15cc <__ultoa_invert+0x6c>
    15e2:	ea cf       	rjmp	.-44     	; 0x15b8 <__ultoa_invert+0x58>
    15e4:	b4 e0       	ldi	r27, 0x04	; 4
    15e6:	a6 95       	lsr	r26
    15e8:	97 95       	ror	r25
    15ea:	87 95       	ror	r24
    15ec:	77 95       	ror	r23
    15ee:	67 95       	ror	r22
    15f0:	ba 95       	dec	r27
    15f2:	c9 f7       	brne	.-14     	; 0x15e6 <__ultoa_invert+0x86>
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	61 05       	cpc	r22, r1
    15f8:	71 05       	cpc	r23, r1
    15fa:	08 95       	ret
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	0a 2e       	mov	r0, r26
    1602:	06 94       	lsr	r0
    1604:	57 95       	ror	r21
    1606:	47 95       	ror	r20
    1608:	37 95       	ror	r19
    160a:	27 95       	ror	r18
    160c:	ba 95       	dec	r27
    160e:	c9 f7       	brne	.-14     	; 0x1602 <__ultoa_invert+0xa2>
    1610:	62 0f       	add	r22, r18
    1612:	73 1f       	adc	r23, r19
    1614:	84 1f       	adc	r24, r20
    1616:	95 1f       	adc	r25, r21
    1618:	a0 1d       	adc	r26, r0
    161a:	08 95       	ret

0000161c <__divmodsi4>:
    161c:	05 2e       	mov	r0, r21
    161e:	97 fb       	bst	r25, 7
    1620:	1e f4       	brtc	.+6      	; 0x1628 <__divmodsi4+0xc>
    1622:	00 94       	com	r0
    1624:	0e 94 25 0b 	call	0x164a	; 0x164a <__negsi2>
    1628:	57 fd       	sbrc	r21, 7
    162a:	07 d0       	rcall	.+14     	; 0x163a <__divmodsi4_neg2>
    162c:	0e 94 c9 07 	call	0xf92	; 0xf92 <__udivmodsi4>
    1630:	07 fc       	sbrc	r0, 7
    1632:	03 d0       	rcall	.+6      	; 0x163a <__divmodsi4_neg2>
    1634:	4e f4       	brtc	.+18     	; 0x1648 <__divmodsi4_exit>
    1636:	0c 94 25 0b 	jmp	0x164a	; 0x164a <__negsi2>

0000163a <__divmodsi4_neg2>:
    163a:	50 95       	com	r21
    163c:	40 95       	com	r20
    163e:	30 95       	com	r19
    1640:	21 95       	neg	r18
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	4f 4f       	sbci	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255

00001648 <__divmodsi4_exit>:
    1648:	08 95       	ret

0000164a <__negsi2>:
    164a:	90 95       	com	r25
    164c:	80 95       	com	r24
    164e:	70 95       	com	r23
    1650:	61 95       	neg	r22
    1652:	7f 4f       	sbci	r23, 0xFF	; 255
    1654:	8f 4f       	sbci	r24, 0xFF	; 255
    1656:	9f 4f       	sbci	r25, 0xFF	; 255
    1658:	08 95       	ret

0000165a <__muluhisi3>:
    165a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__umulhisi3>
    165e:	a5 9f       	mul	r26, r21
    1660:	90 0d       	add	r25, r0
    1662:	b4 9f       	mul	r27, r20
    1664:	90 0d       	add	r25, r0
    1666:	a4 9f       	mul	r26, r20
    1668:	80 0d       	add	r24, r0
    166a:	91 1d       	adc	r25, r1
    166c:	11 24       	eor	r1, r1
    166e:	08 95       	ret

00001670 <__mulshisi3>:
    1670:	b7 ff       	sbrs	r27, 7
    1672:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__muluhisi3>

00001676 <__mulohisi3>:
    1676:	0e 94 2d 0b 	call	0x165a	; 0x165a <__muluhisi3>
    167a:	82 1b       	sub	r24, r18
    167c:	93 0b       	sbc	r25, r19
    167e:	08 95       	ret

00001680 <__prologue_saves__>:
    1680:	2f 92       	push	r2
    1682:	3f 92       	push	r3
    1684:	4f 92       	push	r4
    1686:	5f 92       	push	r5
    1688:	6f 92       	push	r6
    168a:	7f 92       	push	r7
    168c:	8f 92       	push	r8
    168e:	9f 92       	push	r9
    1690:	af 92       	push	r10
    1692:	bf 92       	push	r11
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	ca 1b       	sub	r28, r26
    16aa:	db 0b       	sbc	r29, r27
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	09 94       	ijmp

000016b8 <__epilogue_restores__>:
    16b8:	2a 88       	ldd	r2, Y+18	; 0x12
    16ba:	39 88       	ldd	r3, Y+17	; 0x11
    16bc:	48 88       	ldd	r4, Y+16	; 0x10
    16be:	5f 84       	ldd	r5, Y+15	; 0x0f
    16c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    16c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    16c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    16c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    16c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    16ca:	b9 84       	ldd	r11, Y+9	; 0x09
    16cc:	c8 84       	ldd	r12, Y+8	; 0x08
    16ce:	df 80       	ldd	r13, Y+7	; 0x07
    16d0:	ee 80       	ldd	r14, Y+6	; 0x06
    16d2:	fd 80       	ldd	r15, Y+5	; 0x05
    16d4:	0c 81       	ldd	r16, Y+4	; 0x04
    16d6:	1b 81       	ldd	r17, Y+3	; 0x03
    16d8:	aa 81       	ldd	r26, Y+2	; 0x02
    16da:	b9 81       	ldd	r27, Y+1	; 0x01
    16dc:	ce 0f       	add	r28, r30
    16de:	d1 1d       	adc	r29, r1
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	ed 01       	movw	r28, r26
    16ec:	08 95       	ret

000016ee <__umulhisi3>:
    16ee:	a2 9f       	mul	r26, r18
    16f0:	b0 01       	movw	r22, r0
    16f2:	b3 9f       	mul	r27, r19
    16f4:	c0 01       	movw	r24, r0
    16f6:	a3 9f       	mul	r26, r19
    16f8:	70 0d       	add	r23, r0
    16fa:	81 1d       	adc	r24, r1
    16fc:	11 24       	eor	r1, r1
    16fe:	91 1d       	adc	r25, r1
    1700:	b2 9f       	mul	r27, r18
    1702:	70 0d       	add	r23, r0
    1704:	81 1d       	adc	r24, r1
    1706:	11 24       	eor	r1, r1
    1708:	91 1d       	adc	r25, r1
    170a:	08 95       	ret

0000170c <_exit>:
    170c:	f8 94       	cli

0000170e <__stop_program>:
    170e:	ff cf       	rjmp	.-2      	; 0x170e <__stop_program>
